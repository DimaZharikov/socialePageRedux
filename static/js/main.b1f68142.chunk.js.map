{"version":3,"sources":["common/formsControl/validationFormSettings/validation.ts","common/formsControl/fromControlStyle.module.css","Store/Reducer with Include Selector/MessagePage/MessagePage.Reducer.ts","Store/Reducer with Include Selector/FriendsPage/FriendsPage.Reducer.ts","common/formsControl/FormsControls.tsx","Store/API/API.ts","Store/Reducer with Include Selector/ProfilePage/Profile.Reducer.ts","reportWebVitals.ts","Store/Reducer with Include Selector/DialoguePageRedirect/DialoguePage.Reducer.ts","Store/Reducer with Include Selector/App/App.Reducer.ts","Store/Store.ts","StaticPage/Navigation/Navigation.tsx","WrapPage/Main/MainPostWall/PostComponent.tsx","WrapPage/Main/MainPostWall/PostWallComponent.tsx","WrapPage/Main/MainPostWall/PostWallConteiner.tsx","WrapPage/Main/MainInputStatus/ProfileStatusComponent.tsx","WrapPage/Main/MainInfoBlock/ProfileComponent.tsx","WrapPage/Main/MainInfoBlock/ProfileContainer.tsx","WrapPage/Main/MainAppComponent.tsx","StaticPage/Header/authentication/AuthenticationComponent.tsx","StaticPage/Header/HeaderAppComponent.tsx","common/withSuspense/withSuspense.tsx","WrapPage/Message/Components/Dialogue/ChatComponent.tsx","WrapPage/Message/Components/Dialogue/DialogueAppContainer.tsx","App.tsx","index.tsx","Store/Reducer with Include Selector/AuthRedirectWithHaederPage/Auth.Reducer.ts","img/Ellipsis-4.2s-197px.svg","common/preloader/Preloader.tsx"],"names":["required","value","minLengthValidate","minLength","length","maxLengthValidate","maxLength","module","exports","ActionType","initialState","searchFriends","id","v1","img","name","secondName","Profile_online","messageItems","message","imgUrl","profile_online","importantly","setSearchFriendsAC","type","SET_SEARCH_FRIENDS_AC","payload","onSearchFriendsAC","ON_SEARCH_FRIENDS_AC","setMessageItemsAC","SET_MESSAGE_ITEMS_AC","onRemoveDialogueItemsAC","ON_REMOVE_DIALOGUE_ITEMS","messagePageReducer","state","action","filter","n","toLowerCase","includes","d","friends","pageSize","totalFriendCount","currentPage","isFetching","followingInProgress","unFollow","ON_UNFOLLOW_AC","follow","ON_FOLLOW_AC","setCurrentPage","SET_CURRENT_PAGE","toggleIsFetching","TOGGLE_IS_FETCHING","toggleFollowingProgress","friendsId","TOGGlE_IN_FOLLOWING_PROGRESS","getFriendsThunk","page","dispatch","FriendsAPI","getUsers","then","data","newFriends","SET_FRIEND_AC","followUnfollowFlow","apiMethod","a","resultCode","followThunk","bind","unfollowThunk","friendsReducer","map","fr","followed","FormControl","meta","touched","error","children","hasError","className","style","formControl","TextArea","props","input","restProps","Input","createField","placeholder","validate","component","text","instance","axios","create","withCredentials","baseURL","headers","get","response","items","post","delete","ProfileAPI","getProfile","userId","getStatus","updateStatus","status","put","AuthAPI","authenticator","login","email","password","rememberMe","logOut","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ininitaialState","profile","aboutMe","contacts","facebook","website","vk","twitter","instagram","youtube","github","mainLink","lookingForAJob","lookingForAJobDescription","fullName","photos","small","large","messageForNewPost","itemsPost","imgLikes","counterLikes","ImgPerson","imgShare","imgBtnDeletePost","content","setStatus","SET_STATUS","profilePageReducer","SET_PROFILE_USERS","ADD_NEW_POST","newPost","ON_CHANGE_NEW_POST_TEXT","SET_POST_ITEM_AC","ON_REMOVE_POST_HANDLER","t","chatField","dialoguePageReducer","ADD_CHAT_MESSAGE","newMess","initialized","AppReducer","SET_INITIALIZED","reducer","combineReducers","App","authentication","AuthReducer","profilePage","friendsPage","messagePage","dialoguePage","form","formReducer","middleware","applyMiddleware","thunkMiddleware","store","createStore","composeWithDevTools","window","Navigation","to","PostComponent","onRemovePostHandler","date","Date","hours","getHours","minutes","getMinutes","src","alt","IconButton","onClick","Delete","PostWallComponent","React","memo","useState","onChangeTextFieldHandler","useCallback","event","onChangeTextPost","currentTarget","onRemovePostCreater","TextField","onChange","label","Button","trim","onAddNewPostHandler","variant","color","size","p","connect","setItemPostAC","newPosts","NewPosts","ProfileStatusComponent","editMode","activatedEditMode","setState","deActivatedEditMode","onStatusChange","nextProps","nextState","this","prevProps","prevState","autoFocus","onBlur","PureComponent","ProfileComponent","ProfileConteiner","match","params","history","push","getUserProfile","Preloader","Component","withUrlConteinerComponent","withRouter","MainPageConteiner","auth","useSelector","isAuth","ProfileContainer","PostWallConteiner","AuthenticationComponent","useDispatch","useEffect","getAuthUserDate","logOutThunk","HeaderAppComponent","withSuspense","WrappedComponent","fallback","ChatComponent","mess","DialoguePageContainer","dialogue","DialogueContainerForm","onSubmit","values","dialogueBody","minLengthArea","reduxForm","handleSubmit","Field","FriendContainer","lazy","MessagePageAppComponent","LogInFormContainer","initializerApp","path","render","exact","compose","promise","Promise","all","ReactDOM","document","getElementById","initialeState","setAuthUserDate","SET_USERS_DATE","logInThunk","messageError","messages","stopSubmit","_error","preloader"],"mappings":"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","file":"static/js/main.b1f68142.chunk.js","sourcesContent":["export type FieldValidatorType = (value: string) => string | undefined\r\n\r\nexport const required: FieldValidatorType = (value) => {\r\n    if (value) return undefined;\r\n\r\n    return \"Field is required\";\r\n}\r\n\r\n\r\nexport const minLengthValidate = (minLength: number): FieldValidatorType => (value: string)=> {\r\n    if (value && value.length < minLength) return `Max length is ${minLength} symbols `\r\n    return undefined\r\n}\r\nexport const maxLengthValidate = (maxLength: number): FieldValidatorType => (value: string)=> {\r\n    if (value && value.length > maxLength) return `Max length is ${maxLength} symbols `\r\n    return undefined\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"fromControlStyle_formControl__2JaiV\",\"error\":\"fromControlStyle_error__2433S\",\"formSummaryControl\":\"fromControlStyle_formSummaryControl__2q5vy\"};","import {v1} from \"uuid\";\r\n\r\n\r\nexport interface searchFriendType {\r\n    id: string,\r\n    img: string,\r\n    name: string,\r\n    secondName: string\r\n    Profile_online: boolean\r\n}\r\n\r\nexport type ChangeFilterType = 'All' | 'Unread' | 'Important';\r\n\r\nexport interface messageItemType {\r\n    id: string,\r\n    name: string,\r\n    secondName: string,\r\n    message: string,\r\n    imgUrl: string,\r\n\r\n    profile_online: boolean,\r\n    importantly: ChangeFilterType\r\n}\r\n\r\n\r\n\r\n\r\nexport interface messagePageType {\r\n\r\n    searchFriends: Array<searchFriendType>,\r\n    messageItems: Array<messageItemType>\r\n\r\n}\r\n\r\n\r\nconst initialState: messagePageType = {\r\n\r\n    searchFriends: [\r\n        {\r\n            id: v1(),\r\n            img: \"https://img.icons8.com/officel/32/000000/search-client.png\",\r\n            name: 'Jane',\r\n            secondName: 'SecondName',\r\n            Profile_online: true\r\n        },\r\n        {\r\n            id: v1(),\r\n            img: \"https://img.icons8.com/officel/32/000000/search-client.png\",\r\n            name: 'Nikita',\r\n            secondName: 'SecondName',\r\n            Profile_online: false\r\n        }, {\r\n            id: v1(),\r\n            img: \"https://img.icons8.com/officel/32/000000/search-client.png\",\r\n            name: 'Pasha',\r\n            secondName: 'SecondName',\r\n            Profile_online: true\r\n        }, {\r\n            id: v1(),\r\n            img: \"https://img.icons8.com/officel/32/000000/search-client.png\",\r\n            name: 'Marina',\r\n            secondName: 'SecondName',\r\n            Profile_online: false\r\n        },\r\n    ],\r\n    messageItems: [\r\n        {\r\n            id: v1(),\r\n            name: \"Name\",\r\n            secondName: \"SecondName\",\r\n            message: \"Any Message From Person\",\r\n            imgUrl: \"https://img.icons8.com/emoji/48/000000/neutral-person-medium-dark-skin-tone.png\",\r\n\r\n\r\n            profile_online: true,\r\n            importantly: 'Unread'\r\n        },\r\n        {\r\n            id: v1(),\r\n            name: \"Name\",\r\n            secondName: \"SecondName\",\r\n            message: \"Any Message From Person\",\r\n            imgUrl: \"https://img.icons8.com/emoji/48/000000/neutral-person-medium-dark-skin-tone.png\",\r\n            profile_online: true,\r\n            importantly: 'All'\r\n        },\r\n        {\r\n            id: v1(),\r\n            name: \"Name\",\r\n            secondName: \"SecondName\",\r\n            message: \"Any Message From Person\",\r\n            imgUrl: \"https://img.icons8.com/emoji/48/000000/neutral-person-medium-dark-skin-tone.png\",\r\n\r\n\r\n            profile_online: false,\r\n            importantly: 'Important'\r\n        },\r\n\r\n    ],\r\n\r\n\r\n}\r\n\r\ninterface Action<T> {\r\n    type: ActionType\r\n    payload: T\r\n}\r\n\r\n// enum string configuration: namePages/{name of component}/actionType\r\nexport enum ActionType {\r\n\r\n    SET_SEARCH_FRIENDS_AC = \"message/{SearchFriendsConteiner}/SET-SEARCH-FRIENDS-AC\",\r\n    ON_SEARCH_FRIENDS_AC = \"message/{SearchFriendsConteiner}/ON-SERACH-FRIENDS-AC\",\r\n\r\n\r\n    SET_MESSAGE_ITEMS_AC = \"message/{MessageItemsConteiner}/SET-MESSAGE-ITEMS-AC\",\r\n    ON_REMOVE_DIALOGUE_ITEMS = \"message/{MessageItemsConteiner}/REMOVE-DIALOG-ITEMS\",\r\n\r\n\r\n\r\n}\r\n\r\nexport const setSearchFriendsAC = (searchFriends: Array<searchFriendType>): Action<Array<searchFriendType>> => ({\r\n    type: ActionType.SET_SEARCH_FRIENDS_AC,\r\n    payload: searchFriends\r\n})\r\n\r\nexport const onSearchFriendsAC = (name: string): Action<string> => ({\r\n    type: ActionType.ON_SEARCH_FRIENDS_AC,\r\n    payload: name\r\n})\r\n\r\n\r\nexport const setMessageItemsAC = (messageItems: Array<messageItemType>) => ({\r\n    type: ActionType.SET_MESSAGE_ITEMS_AC,\r\n    payload: messageItems\r\n})\r\n\r\nexport const onRemoveDialogueItemsAC = (id: string): Action<string> => ({\r\n    type: ActionType.ON_REMOVE_DIALOGUE_ITEMS,\r\n    payload: id\r\n})\r\n\r\n\r\nconst messagePageReducer = (state = initialState, action: Action<any>) => {\r\n    switch (action.type) {\r\n        case ActionType.SET_SEARCH_FRIENDS_AC: {\r\n            return {...state, searchFriends: [action.payload, ...state.searchFriends]}\r\n        }\r\n        case ActionType.ON_SEARCH_FRIENDS_AC: {\r\n             if (action.payload !==''){\r\n                return {\r\n                    ...state,\r\n                    searchFriends: state.searchFriends.filter(n => n.name.toLowerCase().includes(action.payload))\r\n                }\r\n            }\r\n             return initialState\r\n        }\r\n\r\n\r\n        case ActionType.ON_REMOVE_DIALOGUE_ITEMS: {\r\n            return {\r\n                ...state,\r\n                messageItems: state.messageItems.filter(d =>\r\n                    d.id !== action.payload\r\n                )\r\n            }\r\n        }\r\n        case ActionType.SET_MESSAGE_ITEMS_AC: {\r\n            return {...state, messageItems: [action.payload, ...state.messageItems]}\r\n        }\r\n\r\n    }\r\n    return state;\r\n}\r\n\r\n\r\nexport default messagePageReducer;\r\n\r\n","import {FriendsAPI, itemsBackPropsToFriends} from \"../../API/API\";\r\nimport {Dispatch} from \"redux\";\r\nimport {setAuthUserDate} from \"../AuthRedirectWithHaederPage/Auth.Reducer\";\r\n\r\nexport interface friendsType {\r\n    name: string,\r\n    id: string,\r\n    uniqueUrlName: string | null,\r\n    photos: {\r\n        small: string | null,\r\n        large: string\r\n    },\r\n    status: string,\r\n    followed: boolean\r\n\r\n}\r\n\r\n\r\nexport interface stateType {\r\n    friends: Array<friendsType>\r\n    pageSize: number,\r\n    totalFriendCount: number,\r\n    currentPage: number,\r\n    isFetching: boolean,\r\n    followingInProgress: Array<number>\r\n\r\n}\r\n\r\nconst initialState: stateType = {\r\n    friends: [],\r\n    pageSize: 5,\r\n    totalFriendCount: 19,\r\n    currentPage: 1,\r\n    isFetching: false,\r\n    followingInProgress: [] as Array<number>\r\n}\r\n\r\n\r\n// enum string configuration: namePages/{name of component}/actionType\r\nexport enum ActionType {\r\n    ON_UNFOLLOW_AC = \"friendsPage/{FriendsComponent}/ON-UNFOLLOW-AC\",\r\n    ON_FOLLOW_AC = 'friendsPage/{FriendsComponent}/FOLLOW-AC',\r\n    SET_FRIEND_AC = 'friendsPage/{FriendsComponent}/SET-FRIEND-AC',\r\n    SET_CURRENT_PAGE = 'friendsPage/{FriendsComponent}/SET-CURRENT-PAGE',\r\n    TOGGLE_IS_FETCHING = 'friendsPage/{GlobalConfiguration}/TOGGLIE_IS_FETCHING',\r\n    TOGGlE_IN_FOLLOWING_PROGRESS = 'friendsPage/{FriendsComponent}/TOGGlE_IN_FOLLOWING_PROGRESS'\r\n\r\n}\r\n\r\ninterface Action<T> {\r\n    type: ActionType,\r\n    payload: T\r\n}\r\n\r\n\r\nexport const unFollow = (id: number): Action<number> => ({\r\n    type: ActionType.ON_UNFOLLOW_AC,\r\n    payload: id\r\n});\r\n\r\n\r\nexport const follow = (id: number): Action<number> => ({\r\n    type: ActionType.ON_FOLLOW_AC,\r\n    payload: id\r\n});\r\n\r\n\r\nexport const setFriend = (newFriends: Array<itemsBackPropsToFriends>): Action<Array<itemsBackPropsToFriends>> => ({\r\n    type: ActionType.SET_FRIEND_AC,\r\n    payload: newFriends\r\n});\r\n\r\n\r\nexport const setCurrentPage = (currentPage: number): Action<number> => ({\r\n    type: ActionType.SET_CURRENT_PAGE,\r\n    payload: currentPage\r\n});\r\n\r\n\r\nexport const toggleIsFetching = (isFetching: boolean): Action<boolean> => ({\r\n    type: ActionType.TOGGLE_IS_FETCHING,\r\n    payload: isFetching\r\n});\r\n\r\n\r\nexport const toggleFollowingProgress = (isFetching: boolean, friendsId: number): Action<{ isFetching: boolean; friendsId: number }> => ({\r\n    type: ActionType.TOGGlE_IN_FOLLOWING_PROGRESS,\r\n    payload: {isFetching, friendsId}\r\n});\r\n\r\n\r\n//thunk\r\nexport const getFriendsThunk = (page: number, pageSize: number) => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(toggleIsFetching(true))\r\n        dispatch(setCurrentPage(page))\r\n        FriendsAPI.getUsers(pageSize, page)\r\n            .then((data) => {\r\n                dispatch(toggleIsFetching(false))\r\n                dispatch(setFriend(data))\r\n            })\r\n    }\r\n};\r\n\r\n//method for Follow & unfollow thunk\r\nconst followUnfollowFlow = async (dispatch: Dispatch, id: number, apiMethod: any, action: any) => {\r\n    dispatch(toggleFollowingProgress(true, id))\r\n    dispatch(toggleIsFetching(true))\r\n    let response = await apiMethod(id);\r\n    if (response.data.resultCode === 0) {\r\n        dispatch(action(id));\r\n    }\r\n    dispatch(toggleFollowingProgress(false, id))\r\n    dispatch(toggleIsFetching(false))\r\n}\r\n\r\n\r\nexport const followThunk = (id: number) => {\r\n    return  async (dispatch: Dispatch) => {\r\n         await followUnfollowFlow(dispatch, id,  FriendsAPI.unFollow.bind(id), unFollow)\r\n\r\n    }\r\n}\r\n\r\nexport const unfollowThunk = (id: number) => {\r\n    return async (dispatch: Dispatch) => {\r\n        await followUnfollowFlow(dispatch, id, FriendsAPI.follow.bind(id), follow)\r\n    }\r\n}\r\n\r\n\r\nconst friendsReducer = (state = initialState, action: Action<any>): stateType => {\r\n    switch (action.type) {\r\n\r\n        case ActionType.ON_UNFOLLOW_AC:\r\n            return {\r\n                ...state,\r\n                friends: state.friends.map(fr => {\r\n\r\n                    if (fr.id === action.payload) {\r\n                        return {...fr, followed: false}\r\n                    }\r\n                    return fr\r\n                })\r\n            }\r\n\r\n        case ActionType.ON_FOLLOW_AC:\r\n            return {\r\n                ...state,\r\n                friends: state.friends.map(fr => {\r\n\r\n                    if (fr.id === action.payload) {\r\n                        return {...fr, followed: true}\r\n                    }\r\n                    return fr\r\n                })\r\n            }\r\n\r\n\r\n        case ActionType.SET_FRIEND_AC: {\r\n            return {...state, friends: action.payload}\r\n        }\r\n        case ActionType.SET_CURRENT_PAGE: {\r\n            return {...state, currentPage: action.payload}\r\n        }\r\n\r\n        case ActionType.TOGGLE_IS_FETCHING: {\r\n            return {...state, isFetching: action.payload}\r\n        }\r\n        case ActionType.TOGGlE_IN_FOLLOWING_PROGRESS: {\r\n            return {\r\n                ...state,\r\n                followingInProgress: action.payload.isFetching ?\r\n                    [...state.followingInProgress, action.payload.friendsId]\r\n                    :\r\n                    state.followingInProgress.filter((id: number) => id !== action.payload.friendsId)\r\n\r\n            }\r\n        }\r\n    }\r\n    return state\r\n}\r\n\r\n\r\nexport default friendsReducer;","import React from 'react'\r\nimport {Field, WrappedFieldInputProps, WrappedFieldMetaProps, WrappedFieldProps} from \"redux-form\";\r\nimport style from './fromControlStyle.module.css'\r\n\r\n\r\ninterface formControlPropsOfParams {\r\n    meta: WrappedFieldMetaProps,\r\n    input: WrappedFieldInputProps\r\n}\r\n\r\n\r\nconst FormControl: React.FC<formControlPropsOfParams> = (\r\n    {\r\n        meta: {touched, error}, children\r\n    }) => {\r\n    const hasError = touched && error\r\n    return (\r\n        <div className={style.formControl + \"\" + (hasError ? style.error : '')}>\r\n\r\n            <div>\r\n                {children}\r\n            </div>\r\n            {hasError && <span>{error}</span>}\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\n\r\nexport const TextArea: React.FC<WrappedFieldProps> = (props) => {\r\n    const {input, ...restProps} = props\r\n    return <FormControl {...props}><textarea{...input} {...restProps}/></FormControl>\r\n\r\n}\r\n\r\nexport const Input: React.FC<WrappedFieldProps> = (props) => {\r\n    const {input, ...restProps} = props\r\n    return <FormControl {...props}><input{...input} {...restProps}/></FormControl>\r\n\r\n}\r\n\r\nexport const createField = (placeholder: string | undefined,\r\n                            name: string,\r\n                            validate: any,\r\n                            component: React.FC<WrappedFieldProps>,\r\n                            props = {}, text = ''\r\n) => (\r\n    <div>\r\n        <Field\r\n            placeholder={placeholder}\r\n            name={name}\r\n            component={component}\r\n            validate={validate}\r\n            {...props}\r\n        /> {text}\r\n    </div>\r\n)\r\n\r\n\r\n\r\n\r\n","import axios from \"axios\";\r\n\r\n\r\nconst instance = axios.create({\r\n    withCredentials: true,\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/',\r\n    headers: {\r\n        \"API-KEY\": \"53463a8d-8572-4c71-942e-6aa342aad633\"\r\n    }\r\n})\r\n\r\n\r\nexport interface itemsBackPropsToFriends {\r\n    followed: boolean,\r\n    id: number,\r\n    name: string | null,\r\n    photos: { small: null | string, large: null | string },\r\n    status: null | string,\r\n    uniqueUrlName: null | string,\r\n}\r\n\r\n\r\nexport interface FriendsPropsTypeAPI {\r\n    items: Array<itemsBackPropsToFriends>,\r\n    totalCount: number,\r\n    error: null | string\r\n}\r\n\r\n\r\nexport const FriendsAPI = {\r\n\r\n    getUsers(currentPage: number, pageSize: number) {\r\n        return instance.get<FriendsPropsTypeAPI>(`users?page=${currentPage}&count=${pageSize}`,\r\n            {withCredentials: true})\r\n            .then(response => {\r\n                return response.data.items\r\n            })\r\n    },\r\n    follow(friendsId: number) {\r\n       return instance.post(`follow/${friendsId}`)\r\n\r\n\r\n    },\r\n    unFollow(friendsId: number) {\r\n        return  instance.delete(`follow/${friendsId}`)\r\n    },\r\n\r\n}\r\n\r\nexport const ProfileAPI = {\r\n    getProfile(userId: string) {\r\n        return instance.get(`profile/` + userId)\r\n    },\r\n    getStatus(userId: string) {\r\n        return instance.get ('profile/status/' + userId)\r\n    },\r\n    updateStatus(status:string) {\r\n        return instance.put('profile/status', {\r\n            status: status\r\n        })\r\n    }\r\n}\r\n\r\nexport const  AuthAPI = {\r\n    authenticator(){\r\n       return instance.get(`auth/me` )\r\n    },\r\n    login(email: string, password: string, rememberMe:boolean = false){\r\n        return instance.post (`auth/login`,{\r\n            email, password, rememberMe\r\n        })\r\n    },\r\n    logOut() {\r\n        return instance.delete(`auth/login`)\r\n    }\r\n}","import {v1} from \"uuid\";\r\nimport {Dispatch} from \"redux\";\r\nimport {ProfileAPI} from \"../../API/API\";\r\n\r\nexport type profileType = {\r\n    \"aboutMe\": string,\r\n    \"contacts\": {\r\n        \"facebook\": string | null,\r\n        \"website\": string | null,\r\n        \"vk\": string | null,\r\n        \"twitter\": string | null,\r\n        \"instagram\": string | null,\r\n        \"youtube\": string | null,\r\n        \"github\": string | null,\r\n        \"mainLink\": string | null\r\n    },\r\n    \"lookingForAJob\": boolean,\r\n    \"lookingForAJobDescription\": boolean,\r\n    \"fullName\": string,\r\n    \"userId\": number | null,\r\n    \"photos\": {\r\n        \"small\": string,\r\n        \"large\": string\r\n\r\n    },\r\n\r\n}\r\nexport type ItemPostType = {\r\n    id: string,\r\n    fullName: string\r\n    imgLikes: string,\r\n    ImgPerson: string,\r\n    imgShare: string,\r\n    imgBtnDeletePost: string,\r\n\r\n    content: string,\r\n    counterLikes: number\r\n\r\n}\r\n\r\n\r\nexport interface StateProps {\r\n    profile: profileType | null,\r\n    status: string,\r\n    messageForNewPost: string,\r\n    itemsPost: Array<ItemPostType>\r\n    isFetching: boolean,\r\n}\r\n\r\n\r\nlet ininitaialState: StateProps = {\r\n    status: '',\r\n    profile: {\r\n        aboutMe: 'Learning Front - end Dev.',\r\n        contacts: {\r\n            facebook: null,\r\n            website: null,\r\n            vk: 'https://vk.com/zharikov_d_n',\r\n            twitter: null,\r\n            instagram: 'instagram.com',\r\n            youtube: null,\r\n            github: 'https://github.com/DimaZharikov',\r\n            mainLink: 'https://www.linkedin.com/feed/',\r\n        },\r\n        lookingForAJob: true,\r\n        lookingForAJobDescription: false,\r\n        fullName: 'Dmitriy Zharikov',\r\n        userId: 13058,\r\n        photos: {\r\n            small: 'https://vk.com/zharikov_d_n?z=photo202353636_457239931%2Falbum202353636_0%2Frev',\r\n            large: 'https://sun9-58.userapi.com/impf/c855220/v855220867/b2242/wUwnR4i_HII.jpg?size=810x1080&quality=96&sign=065f3587fc85d86539273319b7af1f47&type=album'\r\n\r\n        },\r\n\r\n    },\r\n    messageForNewPost: '',\r\n    itemsPost: [\r\n        {\r\n            id: v1(),\r\n            fullName: 'AnyName of Users',\r\n            imgLikes: \"https://img.icons8.com/material-outlined/48/000000/filled-like.png\",\r\n            counterLikes: 0,\r\n            ImgPerson: \"https://img.icons8.com/ios-filled/50/000000/user-male-circle.png\",\r\n            imgShare: \"https://img.icons8.com/metro/52/000000/forward-arrow.png\",\r\n            imgBtnDeletePost: \"https://img.icons8.com/ios/50/000000/delete-message.png\",\r\n\r\n            content: 'AnyMessagePost'\r\n        }\r\n    ],\r\n    isFetching: true,\r\n}\r\n\r\n\r\nexport interface Action<T> {\r\n    type: string,\r\n    payload: T\r\n}\r\n\r\n// enum string configuration: namePages/{name of component}/actionType\r\nexport enum ActionType {\r\n    //ProfileEnumType\r\n    SET_PROFILE_USERS = \"https://social-network.samuraijs.com/api/1.0/profile/{getResponse in ProfileComponent}/SET_PROFILE_USERS\",\r\n\r\n    SET_STATUS = 'SET-STATUS',\r\n\r\n\r\n    // PostsEnumType\r\n    ADD_NEW_POST = 'profilePage/{PostWallConteiner}/ADD-NEW-POST-ITEM',\r\n    ON_CHANGE_NEW_POST_TEXT = \"profilePage/{PostWallConteiner}/ON-CHANGE-NEW-POST-TEXT\",\r\n    ON_REMOVE_POST_HANDLER = \"profilePage/{PostWallConteiner}/REMOVE-POST\",\r\n    SET_POST_ITEM_AC = \"profilePage/{PostWallConteiner}/SET-POST-ITEM-AC\",\r\n\r\n    //Settings\r\n    TOGGLE_IS_FETCHING = 'GlobalConfiguration/TOGGLIE_IS_FETCHING',\r\n}\r\n\r\n//ProfileActionCreater\r\n\r\n\r\nconst profilePageReducer = (state = ininitaialState, action: Action<ActionType>) => {\r\n\r\n    switch (action.type) {\r\n        //setStatus\r\n        case ActionType.SET_STATUS: {\r\n            return {\r\n                ...state,\r\n                status: action.payload\r\n            }\r\n        }\r\n\r\n\r\n        //ProfileCase\r\n        case ActionType.SET_PROFILE_USERS: {\r\n            return {...state, profile: action.payload}\r\n        }\r\n\r\n        // PostsCase\r\n        case ActionType.ADD_NEW_POST: {\r\n            const newPost: ItemPostType = {\r\n                id: v1(),\r\n                fullName: \"AnyName of Users\",\r\n                imgLikes: \"https://img.icons8.com/material-outlined/48/000000/filled-like.png\",\r\n                counterLikes: 0,\r\n                ImgPerson: \"https://img.icons8.com/ios-filled/50/000000/user-male-circle.png\",\r\n                imgShare: \"https://img.icons8.com/metro/52/000000/forward-arrow.png\",\r\n                imgBtnDeletePost: \"https://img.icons8.com/ios/50/000000/delete-message.png\",\r\n\r\n                content: action.payload\r\n            }\r\n            return {...state, itemsPost: [newPost, ...state.itemsPost]}\r\n            // state.itemsPost.unshift(newPost)\r\n        }\r\n        case ActionType.ON_CHANGE_NEW_POST_TEXT: {\r\n\r\n            return {...state, messageForNewPost: action.payload}\r\n        }\r\n        case ActionType.SET_POST_ITEM_AC: {\r\n            return {...state, itemsPost: [state.itemsPost, action.payload]}\r\n        }\r\n        case ActionType.ON_REMOVE_POST_HANDLER: {\r\n            return {\r\n                ...state,\r\n                itemsPost: state.itemsPost.filter(t => t.id !== action.payload)\r\n            }\r\n        }\r\n\r\n        //settingsCase\r\n        case ActionType.TOGGLE_IS_FETCHING: {\r\n            return {...state, isFetching: action.payload}\r\n        }\r\n\r\n\r\n    }\r\n    return state\r\n}\r\n\r\nexport const setUserProfile = (profile: profileType): Action<profileType> => ({\r\n    type: ActionType.SET_PROFILE_USERS,\r\n    payload: profile\r\n})\r\n\r\n\r\n//PostActionCreater\r\nexport const onAddNewPostHandler = (content: string): Action<string> => ({\r\n    type: ActionType.ADD_NEW_POST,\r\n    payload: content\r\n})\r\n\r\nexport const onChangeTextPost = (content: string): Action<string> => ({\r\n    type: ActionType.ON_CHANGE_NEW_POST_TEXT,\r\n    payload: content\r\n})\r\n\r\nexport const onRemovePostCreater = (id: string): Action<string> => ({\r\n    type: ActionType.ON_REMOVE_POST_HANDLER,\r\n    payload: id\r\n})\r\n\r\nexport const setItemPostAC = (NewPosts: ItemPostType): Action<ItemPostType> => ({\r\n    type: ActionType.SET_POST_ITEM_AC,\r\n    payload: NewPosts\r\n})\r\n\r\n\r\n//Status\r\nexport const setStatus = (status: string): Action<string> => ({\r\n    type: ActionType.SET_STATUS,\r\n    payload: status\r\n})\r\n\r\n//settingsActionCreater\r\nexport const toggleIsFetching = (isFetching: boolean): Action<boolean> => ({\r\n    type: ActionType.TOGGLE_IS_FETCHING,\r\n    payload: isFetching\r\n})\r\n\r\n\r\n//thunk\r\nexport const getUserProfile = (userId: string) => {\r\n    return async (dispatch: Dispatch) => {\r\n        const response = await ProfileAPI.getProfile(userId);\r\n        dispatch(setUserProfile(response.data))\r\n    }\r\n}\r\n\r\nexport const getStatus = (userId: string) => {\r\n    return async (dispatch: Dispatch) => {\r\n        const response = await ProfileAPI.getStatus(userId);\r\n        dispatch(setStatus(response.data))\r\n    }\r\n}\r\n\r\nexport const updateStatus = (status: string) => {\r\n    return async (dispatch: Dispatch) => {\r\n        const response = await  ProfileAPI.updateStatus(status);\r\n        if (response.data.resultCode === 0) {\r\n                dispatch(setStatus(status))\r\n            }\r\n\r\n    }\r\n}\r\n\r\nexport default profilePageReducer","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {v1} from \"uuid\";\r\n\r\nexport interface newMessProps {\r\n    id: string,\r\n    text: string\r\n}\r\n\r\n\r\nexport interface stateProps {\r\n    chatField: Array<newMessProps>\r\n\r\n}\r\n\r\nconst initialState: stateProps = {\r\n    chatField: [    ],\r\n}\r\n\r\nexport enum ActionType {\r\n    ADD_CHAT_MESSAGE= 'route_dialogue/userId?'\r\n}\r\n\r\n\r\ninterface Action<T> {\r\n    type: ActionType,\r\n    payload: T\r\n}\r\n\r\nexport const addNewMessage = (dialogueBody:  string): Action<string> => ({\r\n    type: ActionType.ADD_CHAT_MESSAGE,\r\n    payload: dialogueBody\r\n})\r\n\r\n\r\nconst dialoguePageReducer = (state = initialState, action: Action<any>) => {\r\n    switch (action.type) {\r\n        case ActionType.ADD_CHAT_MESSAGE: {\r\n            const newMess: newMessProps ={\r\n                id: v1(),\r\n                text: action.payload\r\n            }\r\n            return {\r\n                ...state, chatField: [newMess, ...state.chatField]\r\n             }\r\n\r\n\r\n        }\r\n    }\r\n    return state\r\n}\r\nexport default dialoguePageReducer","import {getAuthUserDate} from \"../AuthRedirectWithHaederPage/Auth.Reducer\";\r\nimport {ThunkAction} from \"redux-thunk\";\r\nimport {AppRootStateType} from \"../../Store\";\r\n\r\n\r\nexport interface stateProps {\r\n    initialized: boolean\r\n}\r\n\r\n\r\n\r\nconst initialState: stateProps = {\r\n    initialized: false\r\n}\r\n\r\n\r\nexport enum ActionType {\r\n    SET_INITIALIZED='/login will be true'\r\n\r\n}\r\n\r\ninterface Action<T> {\r\n    type: ActionType,\r\n    payload: T\r\n\r\n}\r\n\r\n\r\n\r\n//ActionCreator\r\ntype setInitializerSucceedProps = ReturnType<typeof setInitializerSucceed>\r\nexport const setInitializerSucceed = () => ({\r\n    type: ActionType.SET_INITIALIZED,\r\n\r\n})\r\n\r\n\r\n\r\n//ThunkCreator\r\n\r\nexport const initializerApp = (): ThunkAction<void, AppRootStateType, unknown, setInitializerSucceedProps> => (dispatch) => {\r\n    const promise = dispatch(getAuthUserDate())\r\n\r\n\r\n    Promise.all([promise]).then( () => {\r\n         dispatch(setInitializerSucceed())\r\n    })\r\n}\r\n\r\n\r\nconst AppReducer = (state = initialState, action: Action<any>) => {\r\n    switch (action.type) {\r\n        case ActionType.SET_INITIALIZED :{\r\n    return {\r\n        ...state, initialized: true\r\n    }\r\n        }\r\n\r\n\r\n    }\r\n    return state\r\n}\r\n\r\n\r\n\r\n\r\nexport default AppReducer","import { combineReducers, createStore, applyMiddleware} from \"redux\";\r\nimport friendsReducer from \"./Reducer with Include Selector/FriendsPage/FriendsPage.Reducer\";\r\nimport messagePageReducer from \"./Reducer with Include Selector/MessagePage/MessagePage.Reducer\";\r\nimport profilePageReducer from \"./Reducer with Include Selector/ProfilePage/Profile.Reducer\";\r\nimport AuthReducer from \"./Reducer with Include Selector/AuthRedirectWithHaederPage/Auth.Reducer\";\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport thunkMiddleware from 'redux-thunk';\r\nimport {reducer as formReducer} from 'redux-form';\r\nimport dialoguePageReducer from \"./Reducer with Include Selector/DialoguePageRedirect/DialoguePage.Reducer\";\r\nimport AppReducer from \"./Reducer with Include Selector/App/App.Reducer\";\r\n\r\nconst reducer = combineReducers({\r\n    App: AppReducer,\r\n    authentication: AuthReducer,\r\n    profilePage: profilePageReducer,\r\n    friendsPage: friendsReducer,\r\n    messagePage: messagePageReducer,\r\n    dialoguePage: dialoguePageReducer,\r\n    form: formReducer\r\n\r\n})\r\n\r\n\r\n\r\n\r\nconst middleware = applyMiddleware(thunkMiddleware)\r\n\r\nexport const store = createStore(reducer, composeWithDevTools(middleware));\r\n\r\n\r\n\r\nexport type AppRootStateType = ReturnType<typeof reducer>\r\n\r\nexport default store\r\n\r\n//@ts-ignore\r\nwindow.store = store;","\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {FC} from \"react\";\r\n\r\n\r\n\r\n\r\nexport const Navigation: FC = () => {\r\n    return(\r\n        <nav>\r\n            <div >\r\n\r\n                <div><NavLink to={'/profile'}> <p>Profile</p> </NavLink> </div>\r\n                <div><NavLink to={'/friends'}><p>Friends</p>  </NavLink> </div>\r\n                <div><NavLink to={''}><p>Music</p></NavLink> </div>\r\n                <div><NavLink to={'/Message'}><p>Message</p></NavLink></div>\r\n                <div><NavLink to={''}><p>Video</p></NavLink></div>\r\n                <div><NavLink to={''}><p>Setting</p></NavLink></div>\r\n\r\n\r\n            </div>\r\n        </nav>\r\n    )\r\n\r\n\r\n}\r\n\r\nexport default Navigation\r\n\r\n","import React from 'react'\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport {ItemPostType} from \"../../../Store/Reducer with Include Selector/ProfilePage/Profile.Reducer\";\r\n\r\ninterface Props {\r\n    itemsPost: ItemPostType,\r\n    onRemovePostHandler: (id: string) => void\r\n}\r\n\r\nconst PostComponent: React.FC<Props> = ({\r\n                                            itemsPost,\r\n                                            onRemovePostHandler\r\n\r\n                                        }) => {\r\n    const date = new Date()\r\n    let hours = date.getHours();\r\n    let minutes = date.getMinutes();\r\n\r\n    return (<div key={itemsPost.id}>\r\n        <div>\r\n            <div>\r\n                <div><img src={itemsPost.ImgPerson} alt=\"\"/></div>\r\n                <div>\r\n                    <h4>{itemsPost.fullName}</h4>\r\n                    <p>{`${hours}:${minutes}`}</p>\r\n                </div>\r\n            </div>\r\n            <div>\r\n                <IconButton onClick={() => onRemovePostHandler(itemsPost.id)}>\r\n                    <Delete/>\r\n                </IconButton>\r\n            </div>\r\n        </div>\r\n        <div>\r\n            <p>{itemsPost.content}</p>\r\n        </div>\r\n        <div>\r\n            <button><img src={itemsPost.imgLikes} alt=\"\"/></button>\r\n            <h3>{itemsPost.counterLikes}</h3>\r\n        </div>\r\n        <div><img src={itemsPost.imgShare} alt=\"\"/>\r\n        </div>\r\n\r\n\r\n    </div>)\r\n\r\n}\r\nexport default PostComponent;","import React, {ChangeEvent, useCallback, useState} from \"react\"\r\nimport {ItemPostType} from \"../../../Store/Reducer with Include Selector/ProfilePage/Profile.Reducer\";\r\nimport {TextField} from \"@material-ui/core\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport PostComponent from \"./PostComponent\";\r\n\r\ninterface Props {\r\n    itemsPost: Array<ItemPostType>,\r\n    messageForNewPost: string,\r\n    onAddNewPostHandler: (content: string) => void,\r\n    onChangeTextPost: (content: string) => void,\r\n    onRemovePostCreater: (id: string) => void,\r\n    setItemPostAC: (newPosts: ItemPostType) => void\r\n}\r\n\r\n\r\nconst PostWallComponent: React.FC<Props> = React.memo((props) => {\r\n\r\n    const [error, setError] = useState<string | null>(null)\r\n\r\n    const onChangeTextFieldHandler = useCallback((event: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\r\n        props.onChangeTextPost(event.currentTarget.value)\r\n    }, [props.onChangeTextPost])\r\n\r\n    const onAddNewPost = (content: string) => {\r\n        if (props.messageForNewPost.trim() !== '') {\r\n            props.onAddNewPostHandler(content)\r\n        }\r\n\r\n\r\n    }\r\n\r\n    const onRemovePostHandler = useCallback((id: string) => {\r\n        props.onRemovePostCreater(id)\r\n    }, [])\r\n\r\n    const date = new Date()\r\n    let hourse = date.getHours();\r\n    let minutes = date.getMinutes();\r\n\r\n\r\n    return (<div>\r\n\r\n        <div>\r\n\r\n            <TextField value={props.messageForNewPost} onChange={onChangeTextFieldHandler} id=\"standard-basic\"\r\n                       label=\"Standard\"/>\r\n            <Button onClick={() => onAddNewPost(props.messageForNewPost)} variant=\"outlined\" color=\"primary\"\r\n                    size='small'>Send</Button>\r\n            {error && <div>{error}</div>}\r\n        </div>\r\n        <div>\r\n            {\r\n                props.itemsPost.map(p => {\r\n                    return (<div>\r\n                        <PostComponent key={p.id}\r\n                                       itemsPost={p}\r\n                                       onRemovePostHandler={onRemovePostHandler}/>\r\n                    </div>)\r\n\r\n                })\r\n            }\r\n        </div>\r\n\r\n\r\n    </div>)\r\n})\r\n\r\nexport default PostWallComponent;","import React from 'react'\r\nimport {connect} from \"react-redux\";\r\nimport {\r\n     ItemPostType,\r\n    onAddNewPostHandler,\r\n    onChangeTextPost,\r\n    onRemovePostCreater, setItemPostAC,\r\n} from \"../../../Store/Reducer with Include Selector/ProfilePage/Profile.Reducer\";\r\nimport PostWallComponent from \"./PostWallComponent\";\r\nimport {Dispatch} from \"redux\";\r\n\r\n\r\n\r\nconst mapStateToProps  = (state:{profilePage:{itemsPost: Array <ItemPostType>,messageForNewPost: string } } ) => {\r\n    return {\r\n        itemsPost: state.profilePage.itemsPost,\r\n        messageForNewPost : state.profilePage.messageForNewPost\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch : Dispatch) => {\r\n    return{\r\n        onAddNewPostHandler: (content: string) => {\r\n            dispatch(onAddNewPostHandler(content))\r\n        },\r\n        onChangeTextPost: (content:string) => {\r\n            dispatch(onChangeTextPost(content))\r\n        },\r\n        onRemovePostCreater:(id:string) => {\r\n            dispatch(onRemovePostCreater(id))\r\n        },\r\n        setItemPostAC: (newPosts: ItemPostType) => {\r\n            dispatch(setItemPostAC(newPosts))\r\n        }\r\n\r\n    }\r\n}\r\n\r\n\r\nexport default connect (mapStateToProps, mapDispatchToProps) (PostWallComponent)\r\n\r\n\r\n","import {ChangeEvent, PureComponent} from 'react';\r\n\r\n\r\ninterface Props {\r\n    status: string,\r\n    updateStatus: (status: string)=> void\r\n}\r\n\r\n\r\n\r\n\r\n\r\nclass ProfileStatusComponent extends PureComponent<Props> {\r\n\r\n    shouldComponentUpdate(nextProps: Readonly<Props>, nextState: Readonly<{}>): boolean {\r\n            return  nextProps != this.props || nextState != this.state\r\n    }\r\n\r\n    componentDidUpdate(prevProps: Readonly<Props>, prevState: Readonly<{}>) {\r\n        if (prevProps.status !== this.props.status){\r\n            this.setState({\r\n                status: this.props.status\r\n            })\r\n        }\r\n\r\n    }\r\n\r\n    state = {\r\n        editMode: false,\r\n        status: this.props.status\r\n\r\n    }\r\n\r\n    activatedEditMode =() =>{\r\n        this.setState({\r\n            editMode: true\r\n        })\r\n    }\r\n    deActivatedEditMode =() => {\r\n        this.setState({\r\n            editMode: false\r\n        })\r\n\r\n        this.props.updateStatus(this.state.status)\r\n    }\r\n\r\n    onStatusChange = (event: ChangeEvent<HTMLInputElement>) => {\r\n        this.setState({\r\n            status: event.currentTarget.value\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (<div>\r\n\r\n            {!this.state.editMode ?\r\n                <div>\r\n                    <span onClick={this.activatedEditMode}>{this.state.status || 'No Status'}</span>\r\n                </div>\r\n                :\r\n                <div>\r\n                    <input onChange = {this.onStatusChange}\r\n                        autoFocus={true} onBlur={this.deActivatedEditMode} value={this.state.status}/>\r\n                </div>\r\n            }\r\n\r\n\r\n        </div>)\r\n    }\r\n}\r\n\r\nexport default ProfileStatusComponent;\r\n\r\n","\r\nimport {profileType} from \"../../../Store/Reducer with Include Selector/ProfilePage/Profile.Reducer\";\r\nimport ProfileStatusComponent from \"../MainInputStatus/ProfileStatusComponent\";\r\nimport {FunctionComponent, memo} from \"react\";\r\n\r\ninterface Props{\r\n    profile: profileType\r\n    getUserProfile: (userId: string)=> void,\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n\r\n}\r\n\r\n const ProfileComponent: FunctionComponent<Props> = memo (({profile,status,updateStatus}) => {\r\n    return(<div key = {profile.userId}>\r\n        <div> Name : {profile.fullName}</div>\r\n        <img src={profile.photos.large} alt=\"\"/>\r\n        <ProfileStatusComponent   status = {status}  updateStatus = {updateStatus}     />\r\n\r\n        <div> About Me : {profile.aboutMe}</div>\r\n        <div>Looking For a Job : {profile.lookingForAJob? 'yes' : profile.lookingForAJobDescription}</div>\r\n        <div>\r\n            Contacts:\r\n            facebook: {profile.contacts.facebook},\r\n            website: {profile.contacts.website},\r\n            vk: {profile.contacts.vk},\r\n            twitter: {profile.contacts.twitter},\r\n            instagram: {profile.contacts.instagram},\r\n            youtube: {profile.contacts.youtube},\r\n            github: {profile.contacts.github},\r\n            mainLink: {profile.contacts.mainLink}\r\n        </div>\r\n    </div>)\r\n})\r\n\r\n\r\nexport default ProfileComponent;\r\n\r\n","import {getStatus, getUserProfile, profileType, updateStatus,} from \"../../../Store/Reducer with Include Selector/ProfilePage/Profile.Reducer\";\r\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\r\n\r\nimport {connect} from \"react-redux\";\r\n\r\n\r\nimport Preloader from \"../../../common/preloader/Preloader\";\r\nimport ProfileComponent from \"./ProfileComponent\";\r\nimport {Component} from \"react\";\r\n\r\n\r\n\r\ninterface Props {\r\n    status: string\r\n    profile: profileType\r\n    getUserProfile: (userId: string) => void\r\n    getStatus: (userId: string) => void\r\n    updateStatus: (status: string)=> void\r\n    userId: string | null\r\n\r\n}\r\n\r\n\r\n\r\nconst mapStateToProps = (state: { profilePage: { status: string ,profile: profileType } }) => {\r\n    return {\r\n        profile: state.profilePage.profile,\r\n        status: state.profilePage.status,\r\n\r\n    }\r\n}\r\n\r\n\r\nclass ProfileConteiner extends Component<RouterPropsType> {\r\n\r\n    componentDidMount() {\r\n\r\n        let userId = this.props.match.params.userId\r\n        if (!userId) {\r\n            userId = `${this.props.userId}`\r\n            if (!userId) {\r\n                this.props.history.push('/login')\r\n            }\r\n        }\r\n\r\n        this.props.getUserProfile(userId)\r\n        this.props.getStatus(userId)\r\n    }\r\n\r\n\r\n    render() {\r\n        if (!this.props.profile) {\r\n            return <Preloader/>\r\n        }\r\n        return <ProfileComponent\r\n            profile={this.props.profile}\r\n            getUserProfile={this.props.getUserProfile}\r\n            status = {this.props.status}\r\n            updateStatus={this.props.updateStatus}\r\n\r\n\r\n        />\r\n\r\n    }\r\n}\r\n\r\ntype PathParamsType = {userId : string}\r\ntype RouterPropsType = RouteComponentProps<PathParamsType> & Props\r\n\r\nconst withUrlConteinerComponent = withRouter(ProfileConteiner)\r\n\r\n\r\n\r\n\r\nexport default connect(mapStateToProps, {getUserProfile,getStatus,updateStatus})(withUrlConteinerComponent)","import PostWallConteiner from \"./MainPostWall/PostWallConteiner\";\r\nimport ProfileContainer from \"./MainInfoBlock/ProfileContainer\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../Store/Store\";\r\nimport {stateProps as authProps} from \"../../Store/Reducer with Include Selector/AuthRedirectWithHaederPage/Auth.Reducer\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {FC, memo} from \"react\";\r\n\r\n\r\n\r\n\r\n\r\nconst MainPageConteiner: FC = memo(() => {\r\n\r\n    const auth = useSelector<AppRootStateType, authProps>(state => state.authentication);\r\n    if (!auth.isAuth) return <Redirect to={'/logIn'}/>\r\n\r\n\r\n    return (\r\n        <div>\r\n            <ProfileContainer userId = {auth.data.id}/>\r\n            <PostWallConteiner/>\r\n        </div>\r\n\r\n    )\r\n})\r\n\r\n\r\nexport default MainPageConteiner","import {FC, useEffect} from 'react'\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../../Store/Store\";\r\nimport {getAuthUserDate, logOutThunk, stateProps as authProps} from \"../../../Store/Reducer with Include Selector/AuthRedirectWithHaederPage/Auth.Reducer\";\r\n\r\n\r\nconst AuthenticationComponent: FC  = () => {\r\n\r\n    const auth = useSelector<AppRootStateType,authProps>(state => state.authentication);\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(()=> {\r\n        dispatch (getAuthUserDate())\r\n\r\n    },[])\r\n\r\n\r\n\r\n    return <div>\r\n\r\n        {    auth.isAuth? <button onClick={()=> dispatch(logOutThunk())}><h4>{auth.data.login}</h4> </button> : <NavLink to={'/login'}>LogIn</NavLink> }\r\n\r\n    </div>\r\n}\r\n\r\nexport default AuthenticationComponent;","import {FC} from \"react\";\r\n\r\nimport AuthenticationComponent from \"./authentication/AuthenticationComponent\";\r\n\r\n\r\nconst HeaderAppComponent: FC = ()  => {\r\n\r\n    return <div>\r\n        <AuthenticationComponent  />\r\n    </div>\r\n}\r\n\r\n\r\n\r\n\r\nexport default HeaderAppComponent;","import  {ComponentType, Suspense} from \"react\";\r\nimport Preloader from \"../preloader/Preloader\";\r\n\r\n\r\nexport function withSuspense<WCP>(WrappedComponent: ComponentType<WCP>) {\r\n    return (props: WCP) => {\r\n        return <Suspense fallback={<div><Preloader/></div>} >\r\n            <WrappedComponent {...props} />\r\n        </Suspense>\r\n    }\r\n}","import {FC, Fragment} from 'react'\r\nimport {newMessProps} from \"../../../../Store/Reducer with Include Selector/DialoguePageRedirect/DialoguePage.Reducer\";\r\n\r\ninterface Props {\r\n    chatField: Array<newMessProps>\r\n\r\n\r\n}\r\n\r\nconst ChatComponent: FC <Props> = ({ chatField})=> {\r\n\r\n\r\n    return <Fragment>\r\n\r\n        {chatField.length === 0 ?\r\n            <p>No messages yet</p>\r\n            :\r\n            <div>\r\n                {\r\n                    chatField.map(mess => {\r\n                        return (<div key={mess.id}>\r\n                            <p>{mess.text}</p>\r\n                        </div>)\r\n                    })\r\n                }\r\n            </div>\r\n        }\r\n    </Fragment>\r\n\r\n}\r\n\r\n\r\nexport default ChatComponent","import React from 'react'\r\nimport { Field, InjectedFormProps, reduxForm } from 'redux-form';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../../../Store/Store\";\r\nimport {stateProps as authProps} from \"../../../../Store/Reducer with Include Selector/AuthRedirectWithHaederPage/Auth.Reducer\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {addNewMessage, stateProps as dialogueProps} from \"../../../../Store/Reducer with Include Selector/DialoguePageRedirect/DialoguePage.Reducer\";\r\nimport ChatComponent from \"./ChatComponent\";\r\nimport {minLengthValidate, required} from \"../../../../common/formsControl/validationFormSettings/validation\";\r\nimport {TextArea} from \"../../../../common/formsControl/FormsControls\";\r\n\r\n\r\ninterface Props { }\r\n\r\n\r\nexport const DialoguePageContainer: React.FC <Props> = ({\r\n    ...props\r\n                                                    }) => {\r\n\r\n\r\n    const auth = useSelector<AppRootStateType,authProps>(store=> store.authentication)\r\n    const dialogue = useSelector<AppRootStateType, dialogueProps>(store => store.dialoguePage)\r\n    const dispatch = useDispatch()\r\n\r\n    if (!auth.isAuth) return <Redirect to ={'/login'}/>\r\n\r\n\r\n\r\n    const onSubmit = (values: any) => {\r\n        dispatch(addNewMessage(values.dialogueBody))\r\n    }\r\n\r\n    return <div>\r\n        <ChatComponent chatField = {dialogue.chatField}\r\n        />\r\n        < DialogueContainerForm onSubmit={onSubmit} {...props} />\r\n    </div>\r\n\r\n\r\n\r\n}\r\n\r\nconst minLengthArea = minLengthValidate(1)\r\n\r\nconst DialogueComponentForm: React.FC <InjectedFormProps> = (\r\n    {\r\n        handleSubmit\r\n    }\r\n) => {\r\n\r\n\r\n    return <div>\r\n\r\n        <form onSubmit = {handleSubmit}>\r\n            <Field component={TextArea}\r\n                   name={'dialogueBody'}\r\n                   placeholder={'Enter your message'}\r\n                   validate = {[required,minLengthArea]}\r\n            >\r\n            </Field>\r\n            <button>Send Message</button>\r\n        </form>\r\n    </div>\r\n}\r\n const DialogueContainerForm = reduxForm({form: 'dialogueAddMessageForm'})(DialogueComponentForm)\r\n\r\n","import {Component, lazy, ComponentType} from 'react';\r\nimport Navigation from \"./StaticPage/Navigation/Navigation\";\r\nimport MainPageConteiner from \"./WrapPage/Main/MainAppComponent\";\r\nimport {BrowserRouter, Route, withRouter} from \"react-router-dom\";\r\nimport HeaderAppComponent from \"./StaticPage/Header/HeaderAppComponent\";\r\nimport Preloader from \"./common/preloader/Preloader\";\r\nimport {AppRootStateType} from \"./Store/Store\";\r\nimport {connect} from \"react-redux\";\r\nimport {initializerApp} from \"./Store/Reducer with Include Selector/App/App.Reducer\";\r\nimport {compose} from \"redux\";\r\nimport {withSuspense} from \"./common/withSuspense/withSuspense\";\r\nimport {DialoguePageContainer} from \"./WrapPage/Message/Components/Dialogue/DialogueAppContainer\";\r\n\r\n\r\n//using for portion loading with React.Lazy & Suspense\r\nconst FriendContainer = lazy(():any  => import ('./WrapPage/Friend/FriendsPageConteiner'));\r\nconst MessagePageAppComponent = lazy(():any  => import (\"./WrapPage/Message/MessagePageAppComponent\"));\r\nconst LogInFormContainer = lazy(():any => import (\"./StaticPage/Header/login/LogInFormContainer\"));\r\n\r\n\r\n\r\ninterface Props {\r\n    initialized: boolean\r\n    initializerApp: () => void\r\n}\r\n\r\nclass App extends Component <Props>{\r\n\r\n\r\n    componentDidMount() {\r\n\r\n        this.props.initializerApp()\r\n    }\r\n\r\n    render() {\r\n\r\n        if (!this.props.initialized){\r\n            return <Preloader/>\r\n        }\r\n\r\n        return (<div>\r\n\r\n            <BrowserRouter>\r\n                <HeaderAppComponent/>\r\n                <Navigation/>\r\n\r\n\r\n                <div className='WrapPage -app'>\r\n                    <Route path='/profile/:userId?' render={() => <MainPageConteiner/>}/>\r\n\r\n                    <Route exact path='/friends' render={withSuspense(FriendContainer) }/>\r\n\r\n                    <Route exact path='/Message' render={withSuspense(MessagePageAppComponent)}/>\r\n                    {/*Path to private dialogue from MessagePage/Container */}\r\n                    <Route path='/dialogue/:userId?' render={() => <DialoguePageContainer/> }/>\r\n\r\n                    {/*redirect*/}\r\n                    <Route path='/logIn' render={() => withSuspense(LogInFormContainer)}/>\r\n                </div>\r\n\r\n            </BrowserRouter>\r\n\r\n        </div>);\r\n\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: AppRootStateType) => ({\r\n    initialized: state.App.initialized\r\n})\r\n\r\n\r\n\r\nexport default compose<ComponentType> (withRouter,connect (mapStateToProps,{initializerApp})) (App)\r\n\r\n","import ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport {Provider} from \"react-redux\";\nimport {store} from \"./Store/Store\";\nimport App from \"./App\";\nimport {BrowserRouter} from \"react-router-dom\";\nimport {StrictMode} from 'react';\n\n\n\n\n\n\nReactDOM.render(\n    <StrictMode>\n        <BrowserRouter>\n            <Provider store={store} >\n                <App  />\n            </Provider>\n        </BrowserRouter>\n\n    </StrictMode>,\n    document.getElementById('root')\n);\n\n\nreportWebVitals();\n","import {Dispatch} from \"redux\";\r\nimport {AuthAPI} from \"../../API/API\";\r\nimport {ThunkAction} from \"redux-thunk\";\r\nimport {stopSubmit, FormAction} from \"redux-form\";\r\nimport {AppRootStateType} from \"../../Store\";\r\nimport {AxiosResponse} from \"axios\";\r\n\r\n\r\ninterface dataProps {\r\n    id: string | null,\r\n    email: string | null,\r\n    login: string | null,\r\n\r\n}\r\n\r\nexport interface stateProps {\r\n    data: dataProps\r\n    isAuth: boolean\r\n    isFetching: boolean\r\n   }\r\n\r\n\r\n\r\nconst initialeState: stateProps = {\r\n    data: {\r\n        id: null,\r\n        email: null,\r\n        login: null,\r\n\r\n    },\r\n    isAuth: false,\r\n    isFetching: false,\r\n}\r\n\r\n// enum string configuration: namePages/{name of component}/actionType\r\nexport enum ActionType {\r\n    SET_USERS_DATE = \"/auth/{AuthComponent & HeaderAppComponent, App}/SET-USER-DATE\",\r\n\r\n\r\n}\r\n\r\ninterface Action<T> {\r\n    type: ActionType,\r\n    payload: T\r\n\r\n}\r\n\r\ntype setAuthUserDateType = ReturnType<typeof setAuthUserDate>\r\nexport const setAuthUserDate = (data:dataProps, isAuth: boolean ) : Action<{data:dataProps, isAuth: boolean }> => ({\r\n    type: ActionType.SET_USERS_DATE,\r\n    payload:  {data,isAuth}\r\n})\r\n\r\n\r\n\r\n//thunk\r\nexport const getAuthUserDate = (): ThunkAction<void, AppRootStateType, unknown, setAuthUserDateType> => {\r\n    return  async (dispatch: Dispatch) => {\r\n         const response = await AuthAPI.authenticator();\r\n         if (response.data.resultCode === 0) {\r\n                const {data: {id, email, login}  } = response.data\r\n                dispatch(setAuthUserDate({id, email, login}, true ))\r\n            }\r\n    }\r\n}\r\n\r\n\r\n\r\nexport const logInThunk =   (email: string, password: string, rememberMe: boolean = false): ThunkAction<void, AppRootStateType, unknown, FormAction > =>\r\n async (dispatch ) => {\r\n\r\n         const response = await AuthAPI.login(email, password, rememberMe);\r\n            if (response.data.resultCode === 0) {\r\n                dispatch(getAuthUserDate())\r\n            } else {\r\n                let messageError = response.data.messages.length != 0 ? response.data.messages[0] : 'someError'\r\n                dispatch (stopSubmit('login', {_error: messageError}))\r\n            }\r\n}\r\n\r\n\r\nexport const logOutThunk = () :  ThunkAction<void, AppRootStateType, unknown, setAuthUserDateType> => {\r\n        return async (dispatch) => {\r\n        const response = await AuthAPI.logOut();\r\n            if (response.data.resultCode === 0) {\r\n                dispatch(setAuthUserDate({login: null,email: null,id:null}, false))\r\n            }\r\n        }\r\n}\r\n\r\n\r\nconst AuthReducer = (state = initialeState, action: Action<any>) => {\r\n    switch (action.type) {\r\n        case ActionType.SET_USERS_DATE:\r\n            return {\r\n                ...state,\r\n                data: action.payload.data,\r\n                isAuth: action.payload.isAuth\r\n\r\n            }\r\n    }\r\n    return state\r\n}\r\n\r\n\r\nexport default AuthReducer","export default __webpack_public_path__ + \"static/media/Ellipsis-4.2s-197px.ce28a318.svg\";","import preloader from \"../../img/Ellipsis-4.2s-197px.svg\";\r\nimport {FC} from \"react\";\r\n\r\ninterface Props{\r\n\r\n}\r\n\r\nconst Preloader:FC <Props> = (props) => {\r\n    return <div>\r\n        <img src={preloader} alt=\"\"/>\r\n    </div>\r\n}\r\n\r\nexport default Preloader;"],"sourceRoot":""}