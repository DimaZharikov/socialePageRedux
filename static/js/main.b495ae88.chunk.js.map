{"version":3,"sources":["assets/images/preloader.svg","components/common/Preloader/Preloader.tsx","utils/validators/validators.ts","components/common/Paginator/Paginator.module.css","redux/Movies/moviesById-reducer.ts","api/profile-api.ts","redux/Profile/profile-reducer.ts","redux/Dialogue/dialogs-reducer.ts","redux/Movies/movies-reducer.ts","assets/images/user.png","api/chat-api.ts","redux/Chat/chat-reducer.ts","components/Users/users.module.css","api/api.ts","serviceWorker.js","api/auth-api.ts","api/security-api.ts","redux/Auth/auth-reducer.ts","redux/APP/app-reducer.ts","redux/sidebar-reducer.ts","api/users-api.ts","utils/object-helpers.ts","redux/User/users-reducer.ts","redux/redux-store.ts","redux/Auth/auth-selector.ts","components/Header/Header.tsx","hoc/withSuspense.tsx","redux/User/users-selectors.ts","components/common/Paginator/Paginator.tsx","components/Users/User.tsx","components/Users/UsersSearchForm.tsx","components/Users/Users.tsx","components/Users/UsersContainer.tsx","components/Login/LoginPage.tsx","Routes/Routes.tsx","App.tsx","index.tsx","components/common/FormsControls/FormsControls.tsx","components/common/FormsControls/FormsControls.module.css","api/movies-api.ts"],"names":["Preloader","style","backgroundColor","src","preloader","required","value","maxLengthCreator","maxLength","length","module","exports","initialState","data","actions","movie","type","getMovieByID","id","dispatch","a","moviesAPI","getFilmById","res","console","log","MoviesByIdReducer","state","action","profileAPI","userId","instance","get","then","status","put","photoFile","formData","FormData","append","headers","profile","posts","message","likesCount","addPostActionCreator","newPostText","setUserProfile","setStatus","deletePost","postId","savePhotoSuccess","photos","getUserProfile","getStatus","updateStatus","resultCode","savePhoto","file","saveProfile","getState","auth","Error","stopSubmit","_error","messages","Promise","reject","profileReducer","newPost","filter","p","dialogs","name","sendMessage","newMessageBody","dialogsReducer","body","error","isFetching","movies","page","fetching","getMoviesTC","title","searchFilmsByTitle","Search","catch","rej","nextPageTC","nextPage","MoviesReducer","subcribers","ws","closeHandler","notifySubscribersAboutStatus","setTimeout","createChannel","messageHandler","e","newMessages","JSON","parse","forEach","s","openHandler","errorHandler","cleanUp","removeEventListener","close","WebSocket","addEventListener","chatAPI","eventName","callback","push","send","payload","_newMessageHandler","newMessageHandlerCreator","_statusChangedHandler","statusChangedHandlerCreator","startMessagesListening","stopMessagesListening","chatReducer","map","m","v1","index","array","ResultCodesEnum","ResultCodeForCapcthaEnum","axios","create","withCredentials","baseURL","Boolean","window","location","hostname","match","authAPI","email","password","rememberMe","captcha","post","delete","securityAPI","login","isAuth","captchaUrl","getAuthUserData","meData","Success","getCaptchaUrl","url","authReducer","initialized","appReducer","sidebarReducer","usersAPI","getUsers","currentPage","pageSize","term","friend","follow","unfollow","updateObjectInArray","items","itemId","objPropName","newObjProps","u","users","totalUsersCount","followingInProgress","count","requestUsers","totalCount","usersReducer","followed","rootReducer","combineReducers","profilePage","dialogsPage","sidebar","usersPage","movieById","form","formReducer","app","chat","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunkMiddleware","__store__","selectIsAuth","selectCurrentUserLogin","Header","props","useSelector","useDispatch","Layout","className","span","theme","mode","defaultSelectedKeys","Item","to","alt","icon","UserOutlined","onClick","withSuspense","WrappedComponent","fallback","createSelector","getPageSize","getTotalUsersCount","getCurrentPage","getIsFetching","getFollowingInProgress","getUsersFilter","Paginator","totalItemsCount","onPageChanged","x","portionSize","pagesCount","Math","ceil","pages","i","portionCount","useState","portionNumber","setPortionNumber","leftPortionPageNumber","rightPortionPageNumber","cn","styles","paginator","selectedPage","pageNumber","User","React","memo","user","small","userPhoto","disabled","some","usersSearchFormValidate","values","UsersSearchForm","enableReinitialize","initialValues","String","validate","onSubmit","setSubmitting","onFilterChanged","isSubmitting","as","Users","history","useHistory","useEffect","parsed","queryString","search","substr","actualPage","actualFilter","Number","query","pathname","UsersPage","pageTitle","LoginReduxForm","reduxForm","handleSubmit","createField","Input","undefined","formSummaryError","LoginPage","CaptchaIsRequired","DialogsContainer","lazy","ProfileContainer","ChatPage","VideoContainer","SearchingMovieDesc","SuspendedDialogs","SuspendedProfile","SuspendedChatPage","SuspendedVideoPage","SuspendedDescMovies","Routes","exact","path","render","SubMenu","Menu","Content","Sider","App","catchAllUnhandledErrors","alert","this","initializeApp","padding","margin","width","height","CustomerServiceOutlined","LaptopOutlined","NotificationOutlined","minHeight","Component","AppContainer","withRouter","connect","promise","all","JSApp","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","FormControl","meta","touched","children","hasError","formControl","Textarea","input","restProps","placeholder","validators","component","text","key","moviesInstance"],"mappings":"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","file":"static/js/main.b495ae88.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/preloader.ea356991.svg\";","import React from 'react';\nimport preloader from \"../../../assets/images/preloader.svg\";\n\n\nlet Preloader: React.FC = () => {\n    return <div  style={ { backgroundColor: 'white' } }>\n        <img src={preloader} />\n    </div>\n}\n\nexport default Preloader;\n","export type FieldValidatorType = (value: string) => string | undefined\n\nexport const required: FieldValidatorType = (value) => {\n    if (value) return undefined;\n\n    return \"Field is required\";\n}\n\nexport const maxLengthCreator = (maxLength: number): FieldValidatorType => (value) => {\n    if (value.length > maxLength) return `Max length is ${maxLength} symbols`;\n    return undefined;\n}\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"paginator\":\"Paginator_paginator__3dfoP\",\"pageNumber\":\"Paginator_pageNumber__2bmeP\",\"selectedPage\":\"Paginator_selectedPage__2zTST\"};","import {BaseThunkType, InferActionsTypes} from \"../redux-store\";\r\nimport {FormAction} from \"redux-form/lib/actions\";\r\nimport moviesAPI, {responseMovieByTitle, responseMoviesData} from \"../../api/movies-api\";\r\n\r\n\r\nconst initialState = {\r\n    data: null as responseMovieByTitle | null\r\n\r\n\r\n}\r\n\r\n\r\nexport const actions = {\r\n    setMovieByIdAC: (movie: responseMovieByTitle) => ({\r\n        type: \"SN/MOVIE_ID_COMPONENT/setMovieByIdAC\", movie\r\n    } as const),\r\n\r\n}\r\n\r\nexport const getMovieByID = (id: string) : ThunkType => async(dispatch) => {\r\n    const res = await moviesAPI.getFilmById(id)\r\n    console.log(res)\r\n        dispatch(actions.setMovieByIdAC(res.data))\r\n\r\n}\r\n\r\n\r\n\r\nconst MoviesByIdReducer = (state = initialState,\r\n                       action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case \"SN/MOVIE_ID_COMPONENT/setMovieByIdAC\":\r\n            return { ...state, data: action.movie}\r\n        default:\r\n            return state\r\n    }\r\n\r\n}\r\n\r\n\r\nexport default MoviesByIdReducer\r\n\r\nexport type InitialStateType = typeof initialState\r\ntype ActionsType = InferActionsTypes<typeof actions>\r\ntype ThunkType = BaseThunkType<ActionsType | FormAction>","import {PhotosType, ProfileType} from '../types/types';\nimport {instance, APIResponseType} from './api';\n\ntype SavePhotoResponseDataType = {\n    photos: PhotosType\n}\n\nexport const profileAPI = {\n    getProfile(userId: number) {\n        return instance.get<ProfileType>(`profile/` + userId).then(res => res.data)\n    },\n    getStatus(userId: number) {\n        return instance.get<string>(`profile/status/` + userId).then(res => res.data)\n    },\n    updateStatus(status: string) {\n        return instance.put<APIResponseType>(`profile/status`, {status: status}).then(res => res.data);\n    },\n    savePhoto(photoFile: File) {\n        const formData = new FormData();\n        formData.append(\"image\", photoFile);\n\n        return instance.put<APIResponseType<SavePhotoResponseDataType>>(`profile/photo`, formData, {\n            headers: {\n                'Content-Type': 'multipart/form-data'\n            }\n        }).then(res => res.data);\n    },\n    saveProfile(profile: ProfileType) {\n        return instance.put<APIResponseType>(`profile`, profile).then(res => res.data);\n    }\n}\n","import {FormAction, stopSubmit} from \"redux-form\";\nimport {PhotosType, PostType, ProfileType} from '../../types/types';\nimport {usersAPI} from '../../api/users-api';\nimport {profileAPI} from '../../api/profile-api';\nimport {BaseThunkType, InferActionsTypes} from '../redux-store';\n\nlet initialState = {\n    posts: [\n        {id: 1, message: 'Hi, how are you?', likesCount: 12},\n        {id: 2, message: 'It\\'s my first post', likesCount: 11},\n        {id: 3, message: 'Blabla', likesCount: 11},\n        {id: 4, message: 'Dada', likesCount: 11}\n    ] as Array<PostType>,\n    profile: null as ProfileType | null,\n    status: '',\n}\n\nconst profileReducer = (state = initialState, action: ActionsType): InitialStateType => {\n\n    switch (action.type) {\n        case 'SN/PROFILE/ADD-POST': {\n            let newPost = {\n                id: 5,\n                message: action.newPostText,\n                likesCount: 0\n            };\n            return {\n                ...state,\n                posts: [...state.posts, newPost],\n            };\n        }\n        case 'SN/PROFILE/SET_STATUS': {\n            return {\n                ...state,\n                status: action.status\n            }\n        }\n        case 'SN/PROFILE/SET_USER_PROFILE': {\n            return {...state, profile: action.profile}\n        }\n\n        case 'SN/PROFILE/DELETE_POST':\n            return {...state, posts: state.posts.filter(p => p.id != action.postId)}\n\n        case 'SN/PROFILE/SAVE_PHOTO_SUCCESS':\n            return {...state, profile: {...state.profile, photos: action.photos} as ProfileType}\n        default:\n            return state;\n    }\n}\n\n\nexport const actions = {\n    addPostActionCreator: (newPostText: string) => ({type: 'SN/PROFILE/ADD-POST', newPostText} as const),\n    setUserProfile: (profile: ProfileType) => ({type: 'SN/PROFILE/SET_USER_PROFILE', profile} as const),\n    setStatus: (status: string) => ({type: 'SN/PROFILE/SET_STATUS', status} as const),\n    deletePost: (postId: number) => ({type: 'SN/PROFILE/DELETE_POST', postId} as const),\n    savePhotoSuccess: (photos: PhotosType) => ({type: 'SN/PROFILE/SAVE_PHOTO_SUCCESS', photos} as const)\n}\n\nexport const getUserProfile = (userId: number): ThunkType => async (dispatch) => {\n    const data = await profileAPI.getProfile(userId)\n    dispatch(actions.setUserProfile(data))\n}\n\nexport const getStatus = (userId: number): ThunkType => async (dispatch) => {\n    let data = await profileAPI.getStatus(userId)\n    dispatch(actions.setStatus(data))\n}\n\nexport const updateStatus = (status: string): ThunkType => async (dispatch) => {\n    try {\n        let data = await profileAPI.updateStatus(status)\n\n        if (data.resultCode === 0) {\n            dispatch(actions.setStatus(status))\n        }\n    } catch(error) {\n        //\n    }\n}\n\nexport const savePhoto = (file: File): ThunkType => async (dispatch) => {\n    let data = await profileAPI.savePhoto(file)\n\n    if (data.resultCode === 0) {\n        dispatch(actions.savePhotoSuccess(data.data.photos))\n    }\n}\n\nexport const saveProfile = (profile: ProfileType): ThunkType => async (dispatch, getState) => {\n    const userId = getState().auth.userId\n    const data = await profileAPI.saveProfile(profile)\n\n    if (data.resultCode === 0) {\n        if (userId != null) {\n            dispatch(getUserProfile(userId))\n        } else {\n            throw new Error(\"userId can't be null\")\n        }\n    } else {\n        dispatch(stopSubmit(\"edit-profile\", {_error: data.messages[0] }))\n        return Promise.reject(data.messages[0])\n    }\n}\n\nexport default profileReducer\n\nexport type InitialStateType = typeof initialState\ntype ActionsType = InferActionsTypes<typeof actions>\ntype ThunkType = BaseThunkType<ActionsType | FormAction>\n","import {InferActionsTypes} from '../redux-store';\n\nexport type DialogType = {\n    id: number\n    name: string\n}\nexport type MessageType = {\n    id: number\n    message: string\n}\n\nexport let initialState = {\n    dialogs: [\n        {id: 1, name: 'Dimych'},\n        {id: 2, name: 'Andrew'},\n        {id: 3, name: 'Sveta'},\n        {id: 4, name: 'Sasha'},\n        {id: 5, name: 'Viktor'},\n        {id: 6, name: 'Valera'}\n    ] as Array<DialogType>,\n    messages: [\n        {id: 1, message: 'Hi'},\n        {id: 2, message: 'How is your it-kamasutra?'},\n        {id: 3, message: 'Yo'},\n        {id: 4, message: 'Yo'},\n        {id: 5, message: 'Yo'}\n    ] as Array<MessageType>\n}\n\nconst dialogsReducer = (state = initialState, action: ActionsType): InitialStateType => {\n    switch (action.type) {\n        case 'SN/DIALOGS/SEND_MESSAGE':\n            let body = action.newMessageBody;\n            return {\n                ...state,\n                messages: [...state.messages, {id: 6, message: body}]\n            };\n        default:\n            return state;\n    }\n}\n\nexport const actions = {\n    sendMessage: (newMessageBody: string) => ({type: 'SN/DIALOGS/SEND_MESSAGE', newMessageBody} as const)\n}\n\nexport default dialogsReducer;\n\nexport type InitialStateType = typeof initialState\ntype ActionsType = InferActionsTypes<typeof actions>\n","import moviesAPI, {responseMoviesData} from \"../../api/movies-api\";\r\nimport {AppStateType, BaseThunkType, InferActionsTypes} from \"../redux-store\";\r\nimport {FormAction} from \"redux-form\";\r\nimport {ThunkDispatch} from \"redux-thunk\";\r\n\r\n\r\nexport const initialState = {\r\n    data: [] as responseMoviesData[],\r\n    error: '' as string,\r\n    isFetching: false as boolean\r\n\r\n\r\n}\r\n\r\n\r\nexport const actions = {\r\n    setMoviesAC: (movies: Array<responseMoviesData>) => ({\r\n        type: \"SN/MOVIES/GET_MOVIES\", movies\r\n    } as const),\r\n    nextPageAC: (page: number) => ({\r\n        type: \"SN/MOVIES/SET_PAGE\", page\r\n    } as const),\r\n    setErrorAC: (error: string) => ({\r\n        type: \"SN/MOVIES/SET_ERROR\", error\r\n    } as const),\r\n    setFetchingAC: (fetching: boolean) => ({\r\n        type: \"SN/MOVIES/SET_FETCHING\", fetching\r\n    } as const)\r\n\r\n}\r\n\r\nexport const getMoviesTC = (title: string) => (dispatch: ThunkDispatch<AppStateType, {}, ActionsType>) => {\r\n\r\n        dispatch(actions.setFetchingAC(true))\r\n        moviesAPI.searchFilmsByTitle(title).then(res => {\r\n            console.log(res)\r\n            dispatch(actions.setMoviesAC(res.data.Search))\r\n            dispatch(actions.setFetchingAC(false))\r\n\r\n        })\r\n            .catch( rej => {\r\n                console.log('rej:' , rej )\r\n                const error = rej.data.Error ?\r\n                    rej.data.Error : 'Check'\r\n                dispatch (actions.setErrorAC(error))\r\n\r\n\r\n            })\r\n\r\n\r\n}\r\n\r\n\r\n\r\n    export const nextPageTC = (page: number, title: string): ThunkType => async (dispatch) => {\r\n        dispatch(actions.setFetchingAC(true))\r\n        const res = await moviesAPI.nextPage(page, title)\r\n        dispatch(actions.nextPageAC(page))\r\n        dispatch(actions.setMoviesAC(res.data.Search))\r\n        dispatch(actions.setFetchingAC(false))\r\n\r\n    }\r\n\r\n\r\n    const MoviesReducer = (state = initialState,\r\n                           action: ActionsType): InitialStateType => {\r\n        switch (action.type) {\r\n            case \"SN/MOVIES/GET_MOVIES\":\r\n                debugger\r\n                return {...state, data: action.movies}\r\n            case \"SN/MOVIES/SET_PAGE\":\r\n                return {...state, data: [...state.data, ...state.data]}\r\n            case \"SN/MOVIES/SET_FETCHING\":\r\n                return {...state, isFetching: action.fetching}\r\n            default:\r\n                return state\r\n        }\r\n\r\n    }\r\n\r\n\r\n    export default MoviesReducer\r\n\r\n    export type InitialStateType = typeof initialState\r\n    type ActionsType = InferActionsTypes<typeof actions>\r\n    type ThunkType = BaseThunkType<ActionsType | FormAction>","export default __webpack_public_path__ + \"static/media/user.96e310a6.png\";","const subcribers = {\n    'messages-received': [] as MessagesReceivedSubscriberType[],\n    'status-changed': [] as StatusChangedSubscriberType[]\n}\n\nlet ws: WebSocket | null = null\ntype EventsNamesType = 'messages-received' | 'status-changed'\n\nconst closeHandler = () => {\n    notifySubscribersAboutStatus('pending')\n    setTimeout(createChannel, 3000)\n}\nconst messageHandler = (e: MessageEvent) => {\n    const newMessages = JSON.parse(e.data)\n    subcribers['messages-received'].forEach(s => s(newMessages))\n}\nconst openHandler = () => {\n    notifySubscribersAboutStatus('ready')\n}\nconst errorHandler = () => {\n    notifySubscribersAboutStatus('error')\n    console.error('REFRESH PAGE')\n}\nconst cleanUp = () => {\n    ws?.removeEventListener('close', closeHandler)\n    ws?.removeEventListener('message', messageHandler)\n    ws?.removeEventListener('open', openHandler)\n    ws?.removeEventListener('error', errorHandler)\n}\nconst notifySubscribersAboutStatus = (status: StatusType) => {\n    subcribers['status-changed'].forEach(s => s(status))\n}\n\nfunction createChannel() {\n    cleanUp()\n    ws?.close()\n    ws = new WebSocket('wss://social-network.samuraijs.com/handlers/ChatHandler.ashx')\n    notifySubscribersAboutStatus('pending')\n    ws.addEventListener('close', closeHandler)\n    ws.addEventListener('message', messageHandler)\n    ws.addEventListener('open', openHandler)\n    ws.addEventListener('error', errorHandler)\n}\n\n\nexport const chatAPI = {\n    start() {\n        createChannel()\n    },\n    stop() {\n        subcribers['messages-received'] = []\n        subcribers['status-changed'] = []\n        cleanUp()\n        ws?.close()\n    },\n    subscribe(eventName: EventsNamesType, callback: MessagesReceivedSubscriberType | StatusChangedSubscriberType) {\n        // @ts-ignore\n        subcribers[eventName].push(callback)\n        return () => {\n            // @ts-ignore\n            subcribers[eventName] = subcribers[eventName].filter(s => s !== callback)\n        }\n    },\n    unsubscribe(eventName: EventsNamesType, callback: MessagesReceivedSubscriberType | StatusChangedSubscriberType) {\n        // @ts-ignore\n        subcribers[eventName] = subcribers[eventName].filter(s => s !== callback)\n    },\n    sendMessage(message: string) {\n        ws?.send(message)\n    }\n}\n\ntype MessagesReceivedSubscriberType = (messages: ChatMessageAPIType[]) => void\ntype StatusChangedSubscriberType = (status: StatusType) => void\n\nexport type ChatMessageAPIType = {\n    message: string\n    photo: string\n    userId: number\n    userName: string\n}\nexport type StatusType = 'pending' | 'ready' | 'error'\n","import {ResultCodeForCapcthaEnum, ResultCodesEnum} from '../../api/api'\nimport {stopSubmit} from 'redux-form'\nimport {authAPI} from '../../api/auth-api'\nimport {securityAPI} from '../../api/security-api'\nimport {BaseThunkType, InferActionsTypes} from '../redux-store'\nimport {Action, Dispatch} from 'redux'\nimport {FormAction} from 'redux-form/lib/actions'\nimport {chatAPI, ChatMessageAPIType, StatusType} from '../../api/chat-api'\nimport {v1} from 'uuid'\n\ntype ChatMessageType = ChatMessageAPIType & {id: string}\n\nexport let initialState = {\n    messages: [] as ChatMessageType[],\n    status: 'pending' as StatusType\n}\n\nconst chatReducer = (state = initialState, action: ActionsType): InitialStateType => {\n    switch (action.type) {\n        case 'SN/chat/MESSAGES_RECEVIED':\n            return {\n                ...state,\n                messages: [...state.messages, ...action.payload.messages.map( m => ({...m, id: v1() }))]\n                    .filter((m, index, array) => index >= array.length - 100)\n            }\n        case 'SN/chat/STATUS_CHANGED':\n            return {\n                ...state,\n                status: action.payload.status\n            }\n        default:\n            return state\n    }\n}\n\nexport const actions = {\n    messagesReceived: (messages: ChatMessageAPIType[]) => ({\n        type: 'SN/chat/MESSAGES_RECEVIED', payload: {messages}\n    } as const),\n    statusChanged: (status: StatusType) => ({\n        type: 'SN/chat/STATUS_CHANGED', payload: {status}\n    } as const)\n}\n\nlet _newMessageHandler: ((messages: ChatMessageAPIType[]) => void) | null = null\nconst newMessageHandlerCreator = (dispatch: Dispatch) => {\n    if (_newMessageHandler === null) {\n        _newMessageHandler = (messages) => {\n            dispatch(actions.messagesReceived(messages))\n        }\n    }\n    return _newMessageHandler\n}\n\nlet _statusChangedHandler: ((status: StatusType) => void) | null = null\nconst statusChangedHandlerCreator = (dispatch: Dispatch) => {\n    if (_statusChangedHandler === null) {\n        _statusChangedHandler = (status) => {\n            dispatch(actions.statusChanged(status))\n        }\n    }\n    return _statusChangedHandler\n}\n\nexport const startMessagesListening = (): ThunkType => async (dispatch) => {\n    chatAPI.start()\n    chatAPI.subscribe('messages-received', newMessageHandlerCreator(dispatch))\n    chatAPI.subscribe('status-changed', statusChangedHandlerCreator(dispatch))\n\n}\nexport const stopMessagesListening = (): ThunkType => async (dispatch) => {\n    chatAPI.unsubscribe('messages-received', newMessageHandlerCreator(dispatch))\n    chatAPI.unsubscribe('status-changed', statusChangedHandlerCreator(dispatch))\n    chatAPI.stop()\n}\n\nexport const sendMessage = (message: string): ThunkType => async (dispatch) => {\n    chatAPI.sendMessage(message)\n}\n\n\nexport default chatReducer\n\nexport type InitialStateType = typeof initialState;\ntype ActionsType = InferActionsTypes<typeof actions>\ntype ThunkType = BaseThunkType<ActionsType | FormAction>\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"userPhoto\":\"users_userPhoto__3eCvw\"};","import axios from \"axios\";\nimport {UserType} from '../types/types';\n\n\n//   ------------------------------- API https://social-network.samuraijs.com/api/1.0/ ---------------------------------\nexport const instance = axios.create({\n    withCredentials: true,\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/',\n    headers:     {\n        \"API-KEY\": \"53463a8d-8572-4c71-942e-6aa342aad633\"\n    }\n});\n\nexport enum ResultCodesEnum {\n    Success = 0,\n    Error = 1\n}\n\nexport enum ResultCodeForCapcthaEnum {\n    CaptchaIsRequired = 10\n}\n\nexport type GetItemsType = {\n    items: Array<UserType>\n    totalCount: number\n    error: string | null\n}\nexport type APIResponseType<D = {}, RC = ResultCodesEnum> = {\n    data: D\n    messages: Array<string>\n    resultCode: RC\n}\n\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {instance, APIResponseType, ResultCodeForCapcthaEnum, ResultCodesEnum} from \"./api\";\n\ntype MeResponseDataType = {\n    id: number\n    email: string\n    login: string\n}\ntype LoginResponseDataType = {\n    userId: number\n}\n\nexport const authAPI = {\n    me() {\n        return instance.get<APIResponseType<MeResponseDataType>>(`auth/me`).then(res => res.data);\n    },\n    login(email: string, password: string, rememberMe = false, captcha: null | string = null) {\n        return instance.post<APIResponseType<LoginResponseDataType, ResultCodesEnum | ResultCodeForCapcthaEnum>>(`auth/login`, {email, password, rememberMe, captcha})\n            .then(res => res.data);\n    },\n    logout() {\n        return instance.delete(`auth/login`);\n    }\n}\n","import {instance} from './api';\n\ntype GetCaptchaUrlResponseType = {\n    url: string\n}\n\nexport const securityAPI = {\n    getCaptchaUrl() {\n        return instance.get<GetCaptchaUrlResponseType>(`security/get-captcha-url`).then(res => res.data);\n    }\n}\n","import {ResultCodeForCapcthaEnum, ResultCodesEnum} from \"../../api/api\";\nimport {stopSubmit} from \"redux-form\";\nimport {authAPI} from '../../api/auth-api';\nimport {securityAPI} from '../../api/security-api';\nimport {BaseThunkType, InferActionsTypes} from '../redux-store';\nimport {Action} from 'redux';\nimport {FormAction} from 'redux-form/lib/actions';\n\nexport let initialState = {\n    userId: null as (number | null),\n    email: null as string | null,\n    login: null as string | null,\n    isAuth: false,\n    captchaUrl: null as string | null// if null, then captcha is not required\n};\n\nconst authReducer = (state = initialState, action: ActionsType): InitialStateType => {\n    switch (action.type) {\n        case 'SN/auth/SET_USER_DATA':\n        case 'SN/auth/GET_CAPTCHA_URL_SUCCESS':\n            return {\n                ...state,\n                ...action.payload\n            }\n        default:\n            return state;\n    }\n}\n\nexport const actions = {\n    setAuthUserData: (userId: number | null, email: string | null, login: string | null, isAuth: boolean) => ({\n        type: 'SN/auth/SET_USER_DATA', payload: {userId, email, login, isAuth}\n    } as const),\n    getCaptchaUrlSuccess: (captchaUrl: string) => ({\n        type: 'SN/auth/GET_CAPTCHA_URL_SUCCESS', payload: {captchaUrl}\n    } as const)\n}\n\nexport const getAuthUserData = (): ThunkType => async (dispatch) => {\n    let meData = await authAPI.me()\n    if (meData.resultCode === ResultCodesEnum.Success) {\n        let {id, login, email} = meData.data;\n        dispatch(actions.setAuthUserData(id, email, login, true))\n    }\n}\n\nexport const login = (email: string, password: string, rememberMe: boolean, captcha: string): ThunkType => async (dispatch) => {\n    let data = await authAPI.login(email, password, rememberMe, captcha);\n    if (data.resultCode === ResultCodesEnum.Success) {\n        // success, get auth data\n        dispatch(getAuthUserData())\n    } else {\n        if (data.resultCode === ResultCodeForCapcthaEnum.CaptchaIsRequired) {\n            dispatch(getCaptchaUrl());\n        }\n\n        let message = data.messages.length > 0 ? data.messages[0] : \"Some error\";\n        dispatch(stopSubmit(\"login\", {_error: message}));\n    }\n}\n\nexport const getCaptchaUrl = (): ThunkType => async (dispatch) => {\n    const data = await securityAPI.getCaptchaUrl()\n    const captchaUrl = data.url\n    dispatch(actions.getCaptchaUrlSuccess(captchaUrl))\n}\n\nexport const logout = (): ThunkType => async (dispatch: any) => {\n    let response = await authAPI.logout()\n\n    if (response.data.resultCode === 0) {\n        dispatch(actions.setAuthUserData(null, null, null, false))\n    }\n}\n\nexport default authReducer;\n\nexport type InitialStateType = typeof initialState;\ntype ActionsType = InferActionsTypes<typeof actions>\ntype ThunkType = BaseThunkType<ActionsType | FormAction>\n","import {getAuthUserData} from \"../Auth/auth-reducer\"\nimport {InferActionsTypes} from '../redux-store';\n\nexport let initialState = {\n    initialized: false\n};\n\nexport type InitialStateType = typeof initialState\ntype ActionsType = InferActionsTypes<typeof actions>\n\nconst appReducer = (state = initialState, action: ActionsType): InitialStateType => {\n    switch (action.type) {\n        case 'SN/APP/INITIALIZED_SUCCESS':\n            return {\n                ...state,\n                initialized: true\n            }\n        default:\n            return state;\n    }\n}\n\nexport const actions = {\n    initializedSuccess: () => ({type: 'SN/APP/INITIALIZED_SUCCESS'} as const)\n}\n\nexport const initializeApp = () => (dispatch: any) => {\n    let promise = dispatch(getAuthUserData());\n\n    Promise.all([promise])\n        .then(() => {\n            dispatch(actions.initializedSuccess());\n        });\n}\n\n\nexport default appReducer;\n","let initialState = {}\ntype InitialStateType = typeof initialState\nconst sidebarReducer = (state = initialState, action: any) => {\n    return state;\n}\n\nexport default sidebarReducer;\n","import {GetItemsType, instance, APIResponseType} from './api';\n\n\nexport const usersAPI = {\n    getUsers(currentPage = 1, pageSize = 10, term: string = '', friend: null | boolean = null) {\n        return instance.get<GetItemsType>(`users?page=${currentPage}&count=${pageSize}&term=${term}` + (friend === null ? '' : `&friend=${friend}`) )\n            .then(res => res.data)\n    },\n    follow(userId: number) {\n        return instance.post<APIResponseType>(`follow/${userId}`).then(res => res.data)\n    },\n    unfollow(userId: number) {\n        return instance.delete(`follow/${userId}`).then(res => res.data) as Promise<APIResponseType>\n    }\n}\n","\nexport const updateObjectInArray = (items: any, itemId: any, objPropName: any, newObjProps: any) => {\n    return items.map((u: any) => {\n        if (u[objPropName] === itemId) {\n            return {...u, ...newObjProps}\n        }\n        return u;\n    })\n}\n","import {Dispatch} from 'redux'\nimport {UserType} from \"../../types/types\";\nimport {APIResponseType} from \"../../api/api\";\nimport {usersAPI} from \"../../api/users-api\";\nimport {BaseThunkType, InferActionsTypes} from \"../redux-store\";\nimport {updateObjectInArray} from \"../../utils/object-helpers\";\n\nlet initialState = {\n    users: [] as Array<UserType>,\n    pageSize: 10,\n    totalUsersCount: 0,\n    currentPage: 1,\n    isFetching: true,\n    followingInProgress: [] as Array<number>, //array of users ids,\n    filter: {\n        term: '',\n        friend: null as null | boolean\n    }\n}\n\nconst usersReducer = (state = initialState, action: ActionsTypes): InitialState => {\n    switch (action.type) {\n        case 'SN/USERS/FOLLOW':\n            return {\n                ...state,\n                users: updateObjectInArray(state.users, action.userId, 'id', {followed: true})\n            }\n        case 'SN/USERS/UNFOLLOW':\n            return {\n                ...state,\n                users: updateObjectInArray(state.users, action.userId, 'id', {followed: false})\n            }\n        case 'SN/USERS/SET_USERS': {\n            return {...state, users: action.users}\n        }\n        case 'SN/USERS/SET_CURRENT_PAGE': {\n            return {...state, currentPage: action.currentPage}\n        }\n        case 'SN/USERS/SET_TOTAL_USERS_COUNT': {\n            return {...state, totalUsersCount: action.count}\n        }\n        case 'SN/USERS/TOGGLE_IS_FETCHING': {\n            return {...state, isFetching: action.isFetching}\n        }\n        case 'SN/USERS/SET_FILTER': {\n            return {...state, filter: action.payload}\n        }\n        case 'SN/USERS/TOGGLE_IS_FOLLOWING_PROGRESS': {\n            return {\n                ...state,\n                followingInProgress: action.isFetching\n                    ? [...state.followingInProgress, action.userId]\n                    : state.followingInProgress.filter(id => id != action.userId)\n            }\n        }\n        default:\n            return state\n    }\n}\n\nexport const actions = {\n    followSuccess: (userId: number) => ({type: 'SN/USERS/FOLLOW', userId} as const),\n    unfollowSuccess: (userId: number) => ({type: 'SN/USERS/UNFOLLOW', userId} as const),\n    setUsers: (users: Array<UserType>) => ({type: 'SN/USERS/SET_USERS', users} as const),\n    setCurrentPage: (currentPage: number) => ({type: 'SN/USERS/SET_CURRENT_PAGE', currentPage} as const),\n    setFilter: (filter: FilterType) => ({type: 'SN/USERS/SET_FILTER', payload: filter} as const),\n    setTotalUsersCount: (totalUsersCount: number) => ({\n        type: 'SN/USERS/SET_TOTAL_USERS_COUNT',\n        count: totalUsersCount\n    } as const),\n    toggleIsFetching: (isFetching: boolean) => ({\n        type: 'SN/USERS/TOGGLE_IS_FETCHING',\n        isFetching\n    } as const),\n    toggleFollowingProgress: (isFetching: boolean, userId: number) => ({\n        type: 'SN/USERS/TOGGLE_IS_FOLLOWING_PROGRESS',\n        isFetching,\n        userId\n    } as const)\n}\n\nexport const requestUsers = (page: number,\n                             pageSize: number, filter: FilterType): ThunkType => {\n    return async (dispatch, getState) => {\n        dispatch(actions.toggleIsFetching(true))\n        dispatch(actions.setCurrentPage(page))\n        dispatch(actions.setFilter(filter))\n\n        let data = await usersAPI.getUsers(page, pageSize, filter.term, filter.friend)\n        dispatch(actions.toggleIsFetching(false))\n        dispatch(actions.setUsers(data.items))\n        dispatch(actions.setTotalUsersCount(data.totalCount))\n    }\n}\n\nconst _followUnfollowFlow = async (dispatch: Dispatch<ActionsTypes>,\n                                   userId: number,\n                                   apiMethod: (userId: number) => Promise<APIResponseType>,\n                                   actionCreator: (userId: number) => ActionsTypes) => {\n    dispatch(actions.toggleFollowingProgress(true, userId))\n    let response = await apiMethod(userId)\n\n    if (response.resultCode == 0) {\n        dispatch(actionCreator(userId))\n    }\n    dispatch(actions.toggleFollowingProgress(false, userId))\n}\n\nexport const follow = (userId: number): ThunkType => {\n    return async (dispatch) => {\n        await _followUnfollowFlow(dispatch, userId, usersAPI.follow.bind(usersAPI), actions.followSuccess)\n    }\n}\n\nexport const unfollow = (userId: number): ThunkType => {\n    return async (dispatch) => {\n        await _followUnfollowFlow(dispatch, userId, usersAPI.unfollow.bind(usersAPI), actions.unfollowSuccess)\n    }\n}\n\nexport default usersReducer\n\nexport type InitialState = typeof initialState\nexport type FilterType = typeof initialState.filter\ntype ActionsTypes = InferActionsTypes<typeof actions>\ntype ThunkType = BaseThunkType<ActionsTypes>","import {Action, applyMiddleware, combineReducers, compose, createStore} from \"redux\";\nimport profileReducer from \"./Profile/profile-reducer\";\nimport dialogsReducer from \"./Dialogue/dialogs-reducer\";\nimport sidebarReducer from \"./sidebar-reducer\";\nimport usersReducer from \"./User/users-reducer\";\nimport authReducer from \"./Auth/auth-reducer\";\nimport thunkMiddleware, {ThunkAction} from \"redux-thunk\";\nimport {reducer as formReducer} from 'redux-form'\nimport appReducer from \"./APP/app-reducer\";\nimport chatReducer from './Chat/chat-reducer'\nimport MoviesReducer from \"./Movies/movies-reducer\";\nimport MoviesByIdReducer from \"./Movies/moviesById-reducer\";\n\nlet rootReducer = combineReducers({\n    profilePage: profileReducer,\n    dialogsPage: dialogsReducer,\n    sidebar: sidebarReducer,\n    usersPage: usersReducer,\n    movies:MoviesReducer,\n    movieById: MoviesByIdReducer,\n    auth: authReducer,\n    form: formReducer,\n    app: appReducer,\n    chat: chatReducer,\n\n})\n\ntype RootReducerType = typeof rootReducer; // (globalstate: AppStateType) => AppStateType\nexport type AppStateType = ReturnType<RootReducerType>\n\nexport type InferActionsTypes<T> = T extends { [keys: string]: (...args: any[]) => infer U } ? U : never\n\nexport type BaseThunkType<A extends Action = Action, R = Promise<void>> = ThunkAction<R, AppStateType, unknown, A>\n\n\n// @ts-ignore\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose\n\nconst store = createStore(rootReducer, composeEnhancers(applyMiddleware(thunkMiddleware)))\n// @ts-ignore\nwindow.__store__ = store\n\nexport default store\n","import {AppStateType} from \"../redux-store\";\r\n\r\n\r\nexport const selectIsAuth = (state: AppStateType) => {\r\n    return state.auth.isAuth\r\n}\r\n\r\nexport const selectCurrentUserLogin = (state: AppStateType) => {\r\n    return state.auth.login\r\n}","import React from 'react'\nimport {Link} from 'react-router-dom'\nimport {Avatar, Button, Col, Layout, Menu, Row} from 'antd'\nimport {UserOutlined} from '@ant-design/icons'\nimport {useDispatch, useSelector} from 'react-redux'\n\nimport {logout} from '../../redux/Auth/auth-reducer'\nimport {selectCurrentUserLogin, selectIsAuth} from \"../../redux/Auth/auth-selector\";\n\nexport type MapPropsType = {}\n\nexport const Header: React.FC<MapPropsType> = (props) => {\n\n    const isAuth = useSelector(selectIsAuth)\n    const login = useSelector(selectCurrentUserLogin)\n\n    const dispatch = useDispatch()\n\n    const logoutCallback = () => {\n        dispatch(logout())\n    }\n\n    const {Header} = Layout\n\n    return <Header className=\"header\">\n        <Row>\n            <Col span={18}>\n                <Menu theme=\"dark\" mode=\"horizontal\" defaultSelectedKeys={['2']}>\n                    <Menu.Item key=\"1\"><Link to=\"/developers\">Developers</Link></Menu.Item>\n                </Menu>\n            </Col>\n\n            {isAuth\n                ?<> <Col span={1}>\n                    <Avatar alt={login || ''} style={{backgroundColor: '#87d068'}} icon={<UserOutlined/>}/>\n                </Col>\n                    <Col span={5}>\n                        <Button onClick={logoutCallback}>Log out</Button>\n                    </Col>\n                </>\n                : <Col span={6}>\n                    <Button>\n                        <Link to={'/login'}>Login</Link>\n                    </Button>\n                </Col>}\n\n        </Row>\n\n\n    </Header>\n\n    /*  <header className={s.header}>\n          <img src='https://www.freelogodesign.org/Content/img/logo-ex-7.png' />\n\n          <div className={s.loginBlock}>\n              { props.isAuth\n                  ? <div>{props.login} - <button onClick={props.logout}>Log out</button> </div>\n                  : <NavLink to={'/login'}>Login</NavLink> }\n          </div>\n      </header>*/\n}\n","import {ComponentType, Suspense } from \"react\"\n\nexport function withSuspense<WCP>(WrappedComponent:ComponentType<WCP>) {\n    return (props: WCP) => {\n        return <Suspense fallback={<div>loading...</div>} >\n            <WrappedComponent {...props} />\n        </Suspense>\n    }\n}","import {createSelector} from \"reselect\";\nimport { AppStateType } from \"../redux-store\";\n\nconst getUsersSelector = (state: AppStateType) => {\n    return state.usersPage.users;\n}\n\nexport const getUsers = createSelector(getUsersSelector,\n    (users) => {\n    return users.filter(u => true);\n})\n\nexport const getPageSize = (state: AppStateType) => {\n    return state.usersPage.pageSize;\n}\n\nexport const getTotalUsersCount = (state: AppStateType) => {\n    return state.usersPage.totalUsersCount;\n}\n\nexport const getCurrentPage = (state: AppStateType) => {\n    return state.usersPage.currentPage;\n}\n\nexport const getIsFetching = (state: AppStateType) => {\n    return state.usersPage.isFetching;\n}\n\nexport const getFollowingInProgress = (state: AppStateType) => {\n    return state.usersPage.followingInProgress;\n}\nexport const getUsersFilter = (state: AppStateType) => {\n    return state.usersPage.filter\n}\n","import React, {useState} from 'react'\nimport styles from './Paginator.module.css'\nimport cn from 'classnames'\n\ntype PropsType = {\n    totalItemsCount: number\n    pageSize: number\n    currentPage?: number\n    onPageChanged?: (pageNumber: number) => void\n    portionSize?: number\n}\n\nlet Paginator: React.FC<PropsType> = ({totalItemsCount, pageSize,\n                                      currentPage = 1,\n                                      onPageChanged = x => x,\n                                      portionSize = 10}) => {\n\n    let pagesCount = Math.ceil(totalItemsCount / pageSize);\n\n    let pages: Array<number> = [];\n    for (let i = 1; i <= pagesCount; i++) {\n        pages.push(i);\n    }\n\n    let portionCount = Math.ceil(pagesCount / portionSize);\n    let [portionNumber, setPortionNumber] = useState(1);\n\n    let leftPortionPageNumber = (portionNumber - 1) * portionSize + 1;\n    let rightPortionPageNumber = portionNumber * portionSize;\n\n\n    return <div className={cn(styles.paginator)}>\n        { portionNumber > 1 &&\n        <button onClick={() => { setPortionNumber(portionNumber - 1) }}>PREV</button> }\n\n            {pages\n                .filter(p => p >= leftPortionPageNumber && p<=rightPortionPageNumber)\n                .map((p) => {\n                return <span className={ cn({\n                    [styles.selectedPage]: currentPage === p\n                }, styles.pageNumber) }\n                             key={p}\n                             onClick={(e) => {\n                                 onPageChanged(p);\n                             }}>{p}</span>\n            })}\n        { portionCount > portionNumber &&\n            <button onClick={() => { setPortionNumber(portionNumber + 1) }}>NEXT</button> }\n\n\n    </div>\n}\n\nexport default Paginator;\n","import React from 'react'\nimport styles from './users.module.css'\nimport userPhoto from '../../assets/images/user.png'\nimport {NavLink} from 'react-router-dom'\nimport {UserType} from '../../types/types'\n\ntype PropsType = {\n    user: UserType\n    followingInProgress: Array<number>\n    unfollow: (userId: number) => void\n    follow: (userId: number) => void\n}\n\nconst User: React.FC<PropsType> = React.memo( (\n    {user, followingInProgress, unfollow, follow}\n    ) => {\n    return (\n        <div>\n                <span>\n                    <div>\n                       <NavLink to={'/profile/' + user.id}>\n                        <img src={user.photos.small != null ? user.photos.small : userPhoto}\n                             className={styles.userPhoto}/>\n                       </NavLink>\n                    </div>\n                    <div>\n                        {user.followed\n                            ? <button disabled={followingInProgress\n                                .some(id => id === user.id)}\n                                      onClick={() => {\n                                          unfollow(user.id)\n                                      }}>\n                                Unfollow</button>\n                            : <button disabled={followingInProgress.some(id => id === user.id)}\n                                      onClick={() => {\n                                          follow(user.id)\n                                      }}>\n                                Follow</button>}\n\n                    </div>\n                </span>\n            <span>\n                    <span>\n                        <div>{user.name}</div>\n                        <div>{user.status}</div>\n                    </span>\n                    <span>\n                        <div>{'user.location.country'}</div>\n                        <div>{'user.location.city'}</div>\n                    </span>\n                </span>\n        </div>)\n})\n\nexport default User\n","import {Field, Form, Formik} from 'formik'\nimport React from 'react'\nimport {FilterType} from '../../redux/User/users-reducer'\nimport {useSelector} from 'react-redux'\nimport {getUsersFilter} from '../../redux/User/users-selectors'\n\nconst usersSearchFormValidate = (values: any) => {\n    const errors = {}\n    return errors\n}\n\ntype FriendFormType = 'true' | 'false' | 'null'\n\ntype FormType = {\n    term: string\n    friend: 'true' | 'false' | 'null'\n}\n\ntype PropsType = {\n    onFilterChanged: (filter: FilterType) => void\n}\n\nexport const UsersSearchForm: React.FC<PropsType> = React.memo((props) => {\n    const filter = useSelector(getUsersFilter)\n    const submit = (values: FormType, {setSubmitting}: { setSubmitting: (isSubmitting: boolean) => void }) => {\n        const filter: FilterType = {\n            term: values.term,\n            friend: values.friend === 'null' ? null : values.friend === 'true' ? true : false\n        }\n\n        props.onFilterChanged(filter)\n        setSubmitting(false)\n    }\n\n    return <div>\n        <Formik\n            enableReinitialize\n            initialValues={{term: filter.term, friend: String(filter.friend) as FriendFormType}}\n            validate={usersSearchFormValidate}\n            onSubmit={submit}\n        >\n            {({isSubmitting}) => (\n                <Form>\n                    <Field type=\"text\" name=\"term\"/>\n\n                    <Field name=\"friend\" as=\"select\">\n                        <option value=\"null\">All</option>\n                        <option value=\"true\">Only followed</option>\n                        <option value=\"false\">Only unfollowed</option>\n                    </Field>\n                    <button type=\"submit\" disabled={isSubmitting}>\n                        Find\n                    </button>\n                </Form>\n            )}\n        </Formik>\n    </div>\n})\n","import React, {FC, useEffect} from 'react'\nimport Paginator from '../common/Paginator/Paginator'\nimport User from './User'\nimport {UsersSearchForm} from './UsersSearchForm'\nimport {FilterType, requestUsers} from '../../redux/User/users-reducer'\nimport {useDispatch, useSelector} from 'react-redux'\nimport {\n    getCurrentPage,\n    getFollowingInProgress,\n    getPageSize,\n    getTotalUsersCount,\n    getUsers,\n    getUsersFilter\n} from '../../redux/User/users-selectors'\nimport {useHistory} from 'react-router-dom'\nimport * as queryString from 'querystring'\n\ntype PropsType = {}\n\ntype QueryParamsType = { term?: string; page?: string; friend?: string }\nexport const Users: FC<PropsType> = (props) => {\n\n    const users = useSelector(getUsers)\n    const totalUsersCount = useSelector(getTotalUsersCount)\n    const currentPage = useSelector(getCurrentPage)\n    const pageSize = useSelector(getPageSize)\n    const filter = useSelector(getUsersFilter)\n    const followingInProgress = useSelector(getFollowingInProgress)\n\n    const dispatch = useDispatch()\n    const history = useHistory()\n\n    useEffect(() => {\n        const parsed = queryString.parse(history.location.search.substr(1)) as QueryParamsType\n\n        let actualPage = currentPage\n        let actualFilter = filter\n\n        if (!!parsed.page) actualPage = Number(parsed.page)\n\n\n        if (!!parsed.term) actualFilter = {...actualFilter, term: parsed.term as string}\n\n        switch(parsed.friend) {\n            case \"null\":\n                actualFilter = {...actualFilter, friend: null}\n                break;\n            case \"true\":\n                actualFilter = {...actualFilter, friend: true}\n                break;\n            case \"false\":\n                actualFilter = {...actualFilter, friend: false}\n                break;\n        }\n\n        dispatch(requestUsers(actualPage, pageSize, actualFilter))\n    }, [])\n\n    useEffect(() => {\n        const query: QueryParamsType = {}\n\n        if (!!filter.term) query.term = filter.term\n        if (filter.friend !== null) query.friend = String(filter.friend)\n        if (currentPage !== 1) query.page = String(currentPage)\n\n        history.push({\n            pathname: '/developers',\n            search: queryString.stringify(query)\n        })\n    }, [filter, currentPage])\n\n\n    const onPageChanged = (pageNumber: number) => {\n        dispatch(requestUsers(pageNumber, pageSize, filter))\n    }\n    const onFilterChanged = (filter: FilterType) => {\n        dispatch(requestUsers(1, pageSize, filter))\n    }\n    const follow = (userId: number) => {\n        dispatch(follow(userId));\n    }\n    const unfollow = (userId: number) => {\n        dispatch(unfollow(userId));\n    }\n\n    return <div>\n\n        <UsersSearchForm onFilterChanged={onFilterChanged}/>\n\n        <Paginator currentPage={currentPage} onPageChanged={onPageChanged}\n                   totalItemsCount={totalUsersCount} pageSize={pageSize}/>\n        <div>\n            {\n                users.map(u => <User user={u}\n                                     followingInProgress={followingInProgress}\n                                     key={u.id}\n                                     unfollow={unfollow}\n                                     follow={follow}\n                    />\n                )\n            }\n        </div>\n    </div>\n}\n","import React from 'react'\nimport {useSelector} from 'react-redux'\nimport Preloader from '../common/Preloader/Preloader'\nimport {getIsFetching} from '../../redux/User/users-selectors'\nimport {Users} from './Users'\n\ntype UsersPagePropsType = {\n    pageTitle: string\n}\n\nexport const UsersPage: React.FC<UsersPagePropsType> = (props) => {\n    const isFetching = useSelector(getIsFetching)\n    return <>\n        <h2>{props.pageTitle}</h2>\n        {isFetching ? <Preloader/> : null}\n        <Users />\n    </>\n}\n","import React from 'react'\nimport {InjectedFormProps, reduxForm} from 'redux-form'\nimport {createField, GetStringKeys, Input} from '../common/FormsControls/FormsControls'\nimport {required} from '../../utils/validators/validators'\nimport {useDispatch, useSelector} from 'react-redux'\nimport {login} from '../../redux/Auth/auth-reducer'\nimport {Redirect} from 'react-router-dom'\nimport style from './../common/FormsControls/FormsControls.module.css'\nimport {AppStateType} from '../../redux/redux-store'\n\ntype LoginFormOwnProps = {\n    captchaUrl: string | null\n}\n\nconst LoginForm: React.FC<InjectedFormProps<LoginFormValuesType, LoginFormOwnProps> & LoginFormOwnProps>\n    = ({handleSubmit, error, captchaUrl}) => {\n    return (\n        <form onSubmit={handleSubmit}>\n            {createField<LoginFormValuesTypeKeys>('Email', 'email', [required], Input)}\n            {createField<LoginFormValuesTypeKeys>('Password', 'password', [required], Input, {type: 'password'})}\n            {createField<LoginFormValuesTypeKeys>(undefined, 'rememberMe', [], Input, {type: 'checkbox'}, 'remember me')}\n\n            {captchaUrl && <img src={captchaUrl}/>}\n            {captchaUrl && createField<LoginFormValuesTypeKeys>('Symbols from image', 'captcha', [required], Input, {})}\n\n\n            {error && <div className={style.formSummaryError}>\n                {error}\n            </div>\n            }\n            <div>\n                <button>Login</button>\n            </div>\n        </form>\n    )\n}\n\nconst LoginReduxForm = reduxForm<LoginFormValuesType, LoginFormOwnProps>({form: 'login'})(LoginForm)\n\nexport type LoginFormValuesType = {\n    captcha: string\n    rememberMe: boolean\n    password: string\n    email: string\n}\ntype LoginFormValuesTypeKeys = GetStringKeys<LoginFormValuesType>\n\nexport const LoginPage: React.FC = () => {\n    const captchaUrl = useSelector((state: AppStateType) => state.auth.captchaUrl)\n    const isAuth = useSelector((state: AppStateType) => state.auth.isAuth)\n    const dispatch = useDispatch()\n\n    const onSubmit = (formData: LoginFormValuesType) => {\n        dispatch(login(formData.email, formData.password, formData.rememberMe, formData.captcha))\n    }\n\n    if (isAuth) {\n        return <Redirect to={'/profile'}/>\n    }\n\n    return <div>\n        <h1>Login</h1>\n        <LoginReduxForm onSubmit={onSubmit} captchaUrl={captchaUrl}/>\n    </div>\n}\n","import React, {FC, Fragment} from \"react\";\r\nimport {withSuspense} from \"../hoc/withSuspense\";\r\nimport {Redirect, Route, Switch} from 'react-router-dom'\r\nimport {UsersPage} from \"../components/Users/UsersContainer\";\r\nimport {LoginPage} from \"../components/Login/LoginPage\";\r\n\r\n\r\n//---- LAZY\r\nconst DialogsContainer = React.lazy(() => import(\"../components/Dialogs/DialogsContainer\"));\r\nconst ProfileContainer = React.lazy(() => import(\"../components/Profile/ProfileContainer\"));\r\nconst ChatPage = React.lazy(() => import(\"../pages/Chat/ChatPage\"));\r\nconst VideoContainer = React.lazy(() => import (\"../components/Video/VideoContainer\"));\r\nconst SearchingMovieDesc = React.lazy(() => import (\"../components/Video/SearchingMovie\"));\r\n\r\n// //SUSPENDED\r\nexport const SuspendedDialogs = withSuspense(DialogsContainer);\r\nexport const SuspendedProfile = withSuspense(ProfileContainer);\r\nexport const SuspendedChatPage = withSuspense(ChatPage);\r\nexport const SuspendedVideoPage = withSuspense(VideoContainer);\r\nexport const SuspendedDescMovies = withSuspense(SearchingMovieDesc)\r\n\r\nconst Routes: FC = () => {\r\n    return (<Fragment>\r\n\r\n        <Switch>\r\n            <Route exact path='/'\r\n                   render={() => <Redirect to={'/profile'}/>}/>\r\n\r\n            <Route path='/dialogs'\r\n                   render={() => <SuspendedDialogs/>}/>\r\n\r\n            <Route path='/profile/:userId?'\r\n                   render={() => <SuspendedProfile/>}/>\r\n            {/*moviesBlock*/}\r\n            <Route path='/video'\r\n                   render={() => <SuspendedVideoPage/>}/>\r\n\r\n            <Route path={'/movieByTitle/:imdbID'}\r\n                   render={() => <SuspendedDescMovies/>}/>\r\n            {/*-----------*/}\r\n            <Route path='/developers'\r\n                   render={() => <UsersPage pageTitle={'local Developers'}/>}/>\r\n\r\n            <Route path='/login'\r\n                   render={() => <LoginPage/>}/>\r\n\r\n            <Route path='/chat'\r\n                   render={() => <SuspendedChatPage/>}/>\r\n\r\n            <Route path='*'\r\n                   render={() => <div>404 NOT FOUND</div>}/>\r\n        </Switch>\r\n\r\n    </Fragment>)\r\n}\r\nexport default Routes","import React, {Component} from 'react'\nimport './App.css'\nimport 'antd/dist/antd.css'\nimport {HashRouter, Link, withRouter} from 'react-router-dom'\nimport {connect, Provider} from 'react-redux'\nimport {compose} from 'redux'\nimport {initializeApp} from './redux/APP/app-reducer'\nimport Preloader from './components/common/Preloader/Preloader'\nimport store, {AppStateType} from './redux/redux-store'\n\nimport {Breadcrumb, Layout, Menu} from 'antd'\nimport {LaptopOutlined, NotificationOutlined, UserOutlined, CustomerServiceOutlined} from '@ant-design/icons'\nimport {Header} from './components/Header/Header'\nimport Routes from './Routes/Routes'\n\nconst {SubMenu} = Menu\nconst {Content, Sider} = Layout\n\n\n\ntype MapPropsType = ReturnType<typeof mapStateToProps>\ntype DispatchPropsType = {\n    initializeApp: () => void\n}\n\n\n\nclass App extends Component<MapPropsType & DispatchPropsType> {\n    catchAllUnhandledErrors = (e: PromiseRejectionEvent) => {\n        alert('Some error occured')\n    }\n\n    componentDidMount() {\n        this.props.initializeApp()\n        window.addEventListener('unhandledrejection', this.catchAllUnhandledErrors)\n    }\n\n    componentWillUnmount() {\n        window.removeEventListener('unhandledrejection', this.catchAllUnhandledErrors)\n    }\n\n    render() {\n        if (!this.props.initialized) {\n            return <Preloader/>\n        }\n\n\n        return (\n            <Layout>\n\n                <Header/>\n                <Content style={{padding: '0 50px'}}>\n                    <Breadcrumb style={{margin: '16px 0'}}>\n                        <Breadcrumb.Item>Home</Breadcrumb.Item>\n                        <Breadcrumb.Item>List</Breadcrumb.Item>\n                        <Breadcrumb.Item>App</Breadcrumb.Item>\n                    </Breadcrumb>\n                    <Layout className=\"site-layout-background\" style={{padding: '24px 0'}}>\n                        <Sider className=\"site-layout-background\" width={200}>\n                            <Menu\n                                mode=\"inline\"\n                                /*  defaultSelectedKeys={['7']}*/\n                                /*  defaultOpenKeys={['sub1']}*/\n                                style={{height: '100%'}}\n                            >\n                                <SubMenu key=\"sub1\" icon={<UserOutlined/>} title=\"My Profile\">\n                                    <Menu.Item key=\"1\"> <Link to=\"/profile\">Profile</Link></Menu.Item>\n                                    <Menu.Item key=\"2\"> <Link to=\"/dialogs\">Messages</Link></Menu.Item>\n\n\n                                </SubMenu>\n                                <SubMenu key=\"sub2\" icon={<CustomerServiceOutlined />} title=\"Media\">\n                                    <Menu.Item key=\"3\"> <Link to=\"/video\">Movies</Link></Menu.Item>\n\n                                </SubMenu>\n                                <SubMenu key=\"sub3\" icon={<LaptopOutlined/>} title=\"Developers\">\n                                    <Menu.Item key=\"5\"><Link to=\"/developers\">Developers</Link></Menu.Item>\n\n                                </SubMenu>\n                                <SubMenu key=\"sub4\" icon={<NotificationOutlined/>} title=\"subnav 3\">\n                                    <Menu.Item key=\"9\"><Link to=\"/chat\">Chat</Link></Menu.Item>\n                                </SubMenu>\n                            </Menu>\n                        </Sider>\n                        <Content style={{padding: '0 24px', minHeight: 280}}>\n                       {/*----------------------Wrapped Pages-----------------------------*/}\n                           <Routes/>\n                        {/*------------------------------------*/}\n                        </Content>\n                    </Layout>\n                </Content>\n\n            </Layout>\n\n        )\n    }\n}\n\nconst mapStateToProps = (state: AppStateType) => ({\n    initialized: state.app.initialized\n})\n\nlet AppContainer = compose<React.ComponentType>(\n    withRouter,\n    connect(mapStateToProps, {initializeApp}))(App)\n\nconst JSApp: React.FC = () => {\n    return <HashRouter>\n        <Provider store={store}>\n            <AppContainer/>\n        </Provider>\n    </HashRouter>\n}\n\nexport default JSApp\n","import * as serviceWorker from './serviceWorker';\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport JSApp from \"./App\";\n\nReactDOM.render(<JSApp/>, document.getElementById('root'));\n\n\n// API\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from \"react\"\nimport styles from \"./FormsControls.module.css\"\nimport {FieldValidatorType} from \"../../../utils/validators/validators\"\nimport {Field, WrappedFieldProps} from \"redux-form\"\nimport {WrappedFieldMetaProps} from 'redux-form/lib/Field'\nimport {LoginFormValuesType} from '../../Login/LoginPage';\n\ntype FormControlPropsType = {\n    meta: WrappedFieldMetaProps\n}\n\nconst FormControl: React.FC<FormControlPropsType> = ({meta: {touched, error}, children}) => {\n    const hasError = touched && error;\n    return (\n        <div className={styles.formControl + \" \" + (hasError ? styles.error : \"\")}>\n            <div>\n                {children}\n            </div>\n            {hasError && <span>{error}</span>}\n        </div>\n    )\n}\n\nexport const Textarea: React.FC<WrappedFieldProps> = (props) => {\n    //const {input, meta, child, ...restProps} = props;\n    const {input, meta, ...restProps} = props;\n    return <FormControl {...props}><textarea {...input} {...restProps} /></FormControl>\n}\n\nexport const Input: React.FC<WrappedFieldProps> = (props) => {\n    //const {input, meta, child, ...restProps} = props;\n    const {input, meta, ...restProps} = props;\n    return <FormControl {...props}><input {...input} {...restProps} /></FormControl>\n}\n\nexport function createField<FormKeysType extends string>(placeholder: string | undefined,\n                            name: FormKeysType,\n                            validators: Array<FieldValidatorType>,\n                            component: React.FC<WrappedFieldProps>,\n                            props = {}, text = \"\") {\n    return <div>\n        <Field placeholder={placeholder} name={name}\n               validate={validators}\n               component={component}\n               {...props}\n        /> {text}\n    </div>\n}\n\nexport type GetStringKeys<T> = Extract<keyof T, string>\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormsControls_formControl__2g_-u\",\"error\":\"FormsControls_error__29GyL\",\"formSummaryError\":\"FormsControls_formSummaryError__2uC7N\"};","import axios from \"axios\";\r\n\r\n\r\nconst key = '?apikey=995f97b1';\r\n\r\nconst moviesInstance = axios.create(\r\n    {\r\n        baseURL: `http://www.omdbapi.com/`,\r\n    }\r\n)\r\n\r\nexport const moviesAPI = {\r\n    searchFilmsByTitle(title: string) {\r\n        return moviesInstance.get(`${key}&s=${title}`)\r\n    },\r\n    getFilmById(id: string){\r\n        return moviesInstance.get (`${key}&i=${id}`)\r\n    },\r\n    nextPage(page : number, title: string) {\r\n        return moviesInstance.get(`${key}&s=${title}&page=${page}`  )\r\n    },\r\n}\r\n\r\n\r\n\r\nexport type  responseMoviesData= {\r\n    Poster: string,\r\n    Title: string,\r\n    Type: string,\r\n    Year: string,\r\n    imdbID: string\r\n}\r\n\r\nexport type responseMovieByTitle ={\r\n    Title: string,\r\n    Year: string,\r\n   Rated: string,\r\n   Released: string,\r\n   Runtime: string,\r\n   Genre: string,\r\n   Director: string,\r\n   Writer: string,\r\n   Actors: string,\r\n   Plot: string,\r\n   Language: string,\r\n   Country: string,\r\n   Awards: string,\r\n   Poster: string,\r\n   Ratings: [\r\n        {\r\n            Source: string,\r\n            Value: string\r\n        },\r\n        {\r\n            Source: string,\r\n            Value: string\r\n        },\r\n        {\r\n            Source: string,\r\n            Value: string\r\n        }\r\n    ],\r\n    Metascore: string,\r\n    imdbRating: string,\r\n    imdbVotes: string,\r\n    imdbID: string,\r\n    Type: string,\r\n    DVD: string,\r\n    BoxOffice: string,\r\n    Production: string,\r\n    Website: string,\r\n    Response: string\r\n}\r\n\r\n\r\nexport default moviesAPI;"],"sourceRoot":""}